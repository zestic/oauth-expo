{
    "sourceFile": "src/__tests__/integration/oauth-flow-isolated.test.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1753008728976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753008749827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,47 +22,48 @@\n       (global as any).clearMockStorage?.();\n       (global as any).resetMockCrypto?.();\n     });\n \n-  it('should handle complete authorization code flow', async () => {\n-    // Create a dedicated adapter instance for this test\n-    const flowAdapter = new ExpoOAuthAdapter(mockConfig);\n+    it('should handle complete authorization code flow', async () => {\n+      // Create a dedicated adapter instance for this test\n+      const flowAdapter = new ExpoOAuthAdapter(mockConfig);\n \n-    // 1. Generate authorization URL (this stores PKCE params internally)\n-    const authResult = await flowAdapter.generateAuthorizationUrl();\n-    expect(authResult.url).toBeTruthy();\n-    expect(authResult.state).toBeTruthy();\n+      // 1. Generate authorization URL (this stores PKCE params internally)\n+      const authResult = await flowAdapter.generateAuthorizationUrl();\n+      expect(authResult.url).toBeTruthy();\n+      expect(authResult.state).toBeTruthy();\n \n-    // 2. Simulate callback with authorization code using the same state\n-    const callbackParams = {\n-      code: 'authorization-code-123',\n-      state: authResult.state, // Use the actual state from the authorization URL\n-    };\n+      // 2. Simulate callback with authorization code using the same state\n+      const callbackParams = {\n+        code: 'authorization-code-123',\n+        state: authResult.state, // Use the actual state from the authorization URL\n+      };\n \n-    // Mock token exchange response\n-    const mockTokenResponse = {\n-      ok: true,\n-      status: 200,\n-      headers: new Map([['content-type', 'application/json']]),\n-      json: () => Promise.resolve({\n-        access_token: 'access-token-123',\n-        refresh_token: 'refresh-token-456',\n-        expires_in: 3600,\n-      }),\n-    };\n-    mockTokenResponse.headers.forEach = jest.fn((callback) => {\n-      callback('application/json', 'content-type');\n-    });\n-    (global.fetch as jest.Mock).mockResolvedValueOnce(mockTokenResponse);\n+      // Mock token exchange response\n+      const mockTokenResponse = {\n+        ok: true,\n+        status: 200,\n+        headers: new Map([['content-type', 'application/json']]),\n+        json: () => Promise.resolve({\n+          access_token: 'access-token-123',\n+          refresh_token: 'refresh-token-456',\n+          expires_in: 3600,\n+        }),\n+      };\n+      mockTokenResponse.headers.forEach = jest.fn((callback) => {\n+        callback('application/json', 'content-type');\n+      });\n+      (global.fetch as jest.Mock).mockResolvedValueOnce(mockTokenResponse);\n \n-    // 3. Handle callback using the same adapter instance\n-    const result = await flowAdapter.handleCallback(callbackParams);\n+      // 3. Handle callback using the same adapter instance\n+      const result = await flowAdapter.handleCallback(callbackParams);\n \n-    // 4. Verify the callback was successful\n-    expect(result.success).toBe(true);\n-    expect(result.accessToken).toBe('access-token-123');\n+      // 4. Verify the callback was successful\n+      expect(result.success).toBe(true);\n+      expect(result.accessToken).toBe('access-token-123');\n \n-    // 5. Verify authentication state\n-    expect(await flowAdapter.isAuthenticated()).toBe(true);\n-    expect(await flowAdapter.getAccessToken()).toBe('access-token-123');\n+      // 5. Verify authentication state\n+      expect(await flowAdapter.isAuthenticated()).toBe(true);\n+      expect(await flowAdapter.getAccessToken()).toBe('access-token-123');\n+    });\n   });\n });\n"
                },
                {
                    "date": 1753008776578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,10 @@\n     redirectUri: 'myapp://oauth/callback',\n     scopes: ['read', 'write'],\n   };\n \n-  // Use describe.only to run this test in complete isolation\n-  // Remove .only when the test is stable\n-  describe.only('Complete OAuth Flow', () => {\n+  // This test runs in isolation to avoid storage state pollution\n+  describe('Complete OAuth Flow', () => {\n     beforeAll(() => {\n       // Ensure complete isolation by resetting all mock state\n       (global as any).clearMockStorage?.();\n       (global as any).resetMockCrypto?.();\n"
                },
                {
                    "date": 1753027457875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n             expires_in: 3600,\n           }),\n       };\n       mockTokenResponse.headers.forEach = jest.fn((callback) => {\n-        callback('application/json', 'content-type');\n+        callback('application/json', 'content-type', mockTokenResponse.headers);\n       });\n       (global.fetch as jest.Mock).mockResolvedValueOnce(mockTokenResponse);\n \n       // 3. Handle callback using the same adapter instance\n"
                }
            ],
            "date": 1753008728976,
            "name": "Commit-0",
            "content": "import { ExpoOAuthAdapter } from '../../ExpoOAuthAdapter';\nimport type { ExpoOAuthConfig } from '../../types';\n\n// Isolated integration test for complete OAuth flow\n// This test runs in isolation to avoid storage state pollution from other tests\ndescribe('OAuth Flow - Isolated Integration Test', () => {\n  const mockConfig: ExpoOAuthConfig = {\n    clientId: 'test-client-id',\n    endpoints: {\n      authorization: 'https://auth.example.com/authorize',\n      token: 'https://auth.example.com/token',\n    },\n    redirectUri: 'myapp://oauth/callback',\n    scopes: ['read', 'write'],\n  };\n\n  // Use describe.only to run this test in complete isolation\n  // Remove .only when the test is stable\n  describe.only('Complete OAuth Flow', () => {\n    beforeAll(() => {\n      // Ensure complete isolation by resetting all mock state\n      (global as any).clearMockStorage?.();\n      (global as any).resetMockCrypto?.();\n    });\n\n  it('should handle complete authorization code flow', async () => {\n    // Create a dedicated adapter instance for this test\n    const flowAdapter = new ExpoOAuthAdapter(mockConfig);\n\n    // 1. Generate authorization URL (this stores PKCE params internally)\n    const authResult = await flowAdapter.generateAuthorizationUrl();\n    expect(authResult.url).toBeTruthy();\n    expect(authResult.state).toBeTruthy();\n\n    // 2. Simulate callback with authorization code using the same state\n    const callbackParams = {\n      code: 'authorization-code-123',\n      state: authResult.state, // Use the actual state from the authorization URL\n    };\n\n    // Mock token exchange response\n    const mockTokenResponse = {\n      ok: true,\n      status: 200,\n      headers: new Map([['content-type', 'application/json']]),\n      json: () => Promise.resolve({\n        access_token: 'access-token-123',\n        refresh_token: 'refresh-token-456',\n        expires_in: 3600,\n      }),\n    };\n    mockTokenResponse.headers.forEach = jest.fn((callback) => {\n      callback('application/json', 'content-type');\n    });\n    (global.fetch as jest.Mock).mockResolvedValueOnce(mockTokenResponse);\n\n    // 3. Handle callback using the same adapter instance\n    const result = await flowAdapter.handleCallback(callbackParams);\n\n    // 4. Verify the callback was successful\n    expect(result.success).toBe(true);\n    expect(result.accessToken).toBe('access-token-123');\n\n    // 5. Verify authentication state\n    expect(await flowAdapter.isAuthenticated()).toBe(true);\n    expect(await flowAdapter.getAccessToken()).toBe('access-token-123');\n  });\n});\n"
        }
    ]
}