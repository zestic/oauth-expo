{
    "sourceFile": "src/__tests__/components/OAuthCallbackScreen.test.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1752904218550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752915821732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,14 +47,13 @@\n       expect(getByTestId('oauth-callback-processing')).toBeTruthy();\n       expect(getByText('Processing OAuth callback...')).toBeTruthy();\n     });\n \n-    it('should call handleCallback on mount when processing', async () => {\n-      const mockHandleCallback = jest.fn();\n+    it('should initialize with processing state and auto-start callback', async () => {\n       mockUseOAuthCallback.mockReturnValue({\n         status: 'processing',\n         message: 'Processing OAuth callback...',\n-        handleCallback: mockHandleCallback,\n+        handleCallback: jest.fn(),\n         retry: jest.fn(),\n       });\n \n       render(\n@@ -64,11 +63,22 @@\n           onError={mockOnError}\n         />\n       );\n \n-      await waitFor(() => {\n-        expect(mockHandleCallback).toHaveBeenCalledTimes(1);\n-      });\n+      // Verify the hook was called with correct parameters including autoStart: true\n+      expect(mockUseOAuthCallback).toHaveBeenCalledWith(\n+        {}, // default empty params\n+        mockConfig,\n+        {\n+          onSuccess: mockOnSuccess,\n+          onError: mockOnError,\n+          autoStart: true,\n+        }\n+      );\n+\n+      // Verify the component shows processing state\n+      expect(screen.getByText('Authenticating...')).toBeInTheDocument();\n+      expect(screen.getByText('Processing OAuth callback...')).toBeInTheDocument();\n     });\n \n     it('should render custom processing message', () => {\n       mockUseOAuthCallback.mockReturnValue({\n"
                },
                {
                    "date": 1752915856819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,435 @@\n+import React from 'react';\n+import { render, fireEvent, waitFor } from '@testing-library/react-native';\n+import { OAuthCallbackScreen } from '../../components/OAuthCallbackScreen';\n+import { useOAuthCallback } from '../../hooks/useOAuthCallback';\n+import type { ExpoOAuthConfig } from '../../types';\n+\n+// Mock the hook\n+jest.mock('../../hooks/useOAuthCallback');\n+\n+const mockUseOAuthCallback = useOAuthCallback as jest.MockedFunction<typeof useOAuthCallback>;\n+\n+describe('OAuthCallbackScreen', () => {\n+  const mockConfig: ExpoOAuthConfig = {\n+    clientId: 'test-client-id',\n+    endpoints: {\n+      authorization: 'https://auth.example.com/authorize',\n+      token: 'https://auth.example.com/token',\n+    },\n+    redirectUri: 'myapp://oauth/callback',\n+    scopes: ['read', 'write'],\n+  };\n+\n+  const mockOnSuccess = jest.fn();\n+  const mockOnError = jest.fn();\n+\n+  beforeEach(() => {\n+    jest.clearAllMocks();\n+  });\n+\n+  describe('processing state', () => {\n+    it('should render processing state correctly', () => {\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'processing',\n+        message: 'Processing OAuth callback...',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      const { getByText, getByTestId } = render(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      expect(getByTestId('oauth-callback-processing')).toBeTruthy();\n+      expect(getByText('Processing OAuth callback...')).toBeTruthy();\n+    });\n+\n+    it('should initialize with processing state and auto-start callback', async () => {\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'processing',\n+        message: 'Processing OAuth callback...',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      const { getByText } = render(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      // Verify the hook was called with correct parameters including autoStart: true\n+      expect(mockUseOAuthCallback).toHaveBeenCalledWith(\n+        {}, // default empty params\n+        mockConfig,\n+        {\n+          onSuccess: mockOnSuccess,\n+          onError: mockOnError,\n+          autoStart: true,\n+        }\n+      );\n+\n+      // Verify the component shows processing state\n+      expect(getByText('Authenticating...')).toBeTruthy();\n+      expect(getByText('Processing OAuth callback...')).toBeTruthy();\n+    });\n+\n+    it('should render custom processing message', () => {\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'processing',\n+        message: 'Custom processing message',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      const { getByText } = render(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      expect(getByText('Custom processing message')).toBeTruthy();\n+    });\n+  });\n+\n+  describe('success state', () => {\n+    it('should render success state correctly', () => {\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'success',\n+        message: 'Authentication successful!',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      const { getByText, getByTestId } = render(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      expect(getByTestId('oauth-callback-success')).toBeTruthy();\n+      expect(getByText('Authentication successful!')).toBeTruthy();\n+    });\n+\n+    it('should call onSuccess when status changes to success', () => {\n+      const { rerender } = render(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      // Initially processing\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'processing',\n+        message: 'Processing...',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      rerender(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      // Change to success\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'success',\n+        message: 'Success!',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      rerender(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      expect(mockOnSuccess).toHaveBeenCalledTimes(1);\n+    });\n+\n+    it('should render custom success message', () => {\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'success',\n+        message: 'Login completed successfully!',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      const { getByText } = render(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      expect(getByText('Login completed successfully!')).toBeTruthy();\n+    });\n+  });\n+\n+  describe('error state', () => {\n+    it('should render error state correctly', () => {\n+      const mockRetry = jest.fn();\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'error',\n+        message: 'Authentication failed',\n+        handleCallback: jest.fn(),\n+        retry: mockRetry,\n+      });\n+\n+      const { getByText, getByTestId } = render(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      expect(getByTestId('oauth-callback-error')).toBeTruthy();\n+      expect(getByText('Authentication failed')).toBeTruthy();\n+      expect(getByText('Try Again')).toBeTruthy();\n+    });\n+\n+    it('should call onError when status changes to error', () => {\n+      const { rerender } = render(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      // Initially processing\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'processing',\n+        message: 'Processing...',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      rerender(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      // Change to error\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'error',\n+        message: 'Authentication failed',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      rerender(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      expect(mockOnError).toHaveBeenCalledWith('Authentication failed');\n+    });\n+\n+    it('should call retry when Try Again button is pressed', () => {\n+      const mockRetry = jest.fn();\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'error',\n+        message: 'Network error',\n+        handleCallback: jest.fn(),\n+        retry: mockRetry,\n+      });\n+\n+      const { getByText } = render(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      const retryButton = getByText('Try Again');\n+      fireEvent.press(retryButton);\n+\n+      expect(mockRetry).toHaveBeenCalledTimes(1);\n+    });\n+\n+    it('should render custom error message', () => {\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'error',\n+        message: 'User denied access',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      const { getByText } = render(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      expect(getByText('User denied access')).toBeTruthy();\n+    });\n+  });\n+\n+  describe('custom styling', () => {\n+    it('should apply custom container style', () => {\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'processing',\n+        message: 'Processing...',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      const customStyle = { backgroundColor: 'red' };\n+\n+      const { getByTestId } = render(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+          style={customStyle}\n+        />\n+      );\n+\n+      const container = getByTestId('oauth-callback-container');\n+      expect(container.props.style).toEqual(\n+        expect.arrayContaining([expect.objectContaining(customStyle)])\n+      );\n+    });\n+\n+    it('should apply custom text style', () => {\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'processing',\n+        message: 'Processing...',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      const customTextStyle = { color: 'blue', fontSize: 20 };\n+\n+      const { getByTestId } = render(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+          textStyle={customTextStyle}\n+        />\n+      );\n+\n+      const text = getByTestId('oauth-callback-text');\n+      expect(text.props.style).toEqual(\n+        expect.arrayContaining([expect.objectContaining(customTextStyle)])\n+      );\n+    });\n+\n+    it('should apply custom button style', () => {\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'error',\n+        message: 'Error occurred',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      const customButtonStyle = { backgroundColor: 'green' };\n+\n+      const { getByTestId } = render(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+          buttonStyle={customButtonStyle}\n+        />\n+      );\n+\n+      const button = getByTestId('oauth-callback-retry-button');\n+      expect(button.props.style).toEqual(\n+        expect.objectContaining(customButtonStyle)\n+      );\n+    });\n+  });\n+\n+  describe('accessibility', () => {\n+    it('should have proper accessibility labels', () => {\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'error',\n+        message: 'Authentication failed',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      const { getByTestId } = render(\n+        <OAuthCallbackScreen\n+          config={mockConfig}\n+          onSuccess={mockOnSuccess}\n+          onError={mockOnError}\n+        />\n+      );\n+\n+      const retryButton = getByTestId('oauth-callback-retry-button');\n+      expect(retryButton.props.accessibilityLabel).toBe('Retry OAuth authentication');\n+      expect(retryButton.props.accessibilityRole).toBe('button');\n+    });\n+  });\n+\n+  describe('edge cases', () => {\n+    it('should handle missing onSuccess callback', () => {\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'success',\n+        message: 'Success!',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      expect(() =>\n+        render(\n+          <OAuthCallbackScreen\n+            config={mockConfig}\n+            onError={mockOnError}\n+          />\n+        )\n+      ).not.toThrow();\n+    });\n+\n+    it('should handle missing onError callback', () => {\n+      mockUseOAuthCallback.mockReturnValue({\n+        status: 'error',\n+        message: 'Error!',\n+        handleCallback: jest.fn(),\n+        retry: jest.fn(),\n+      });\n+\n+      expect(() =>\n+        render(\n+          <OAuthCallbackScreen\n+            config={mockConfig}\n+            onSuccess={mockOnSuccess}\n+          />\n+        )\n+      ).not.toThrow();\n+    });\n+  });\n+});\n"
                },
                {
                    "date": 1752916099221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,50 +120,39 @@\n       expect(getByTestId('oauth-callback-success')).toBeTruthy();\n       expect(getByText('Authentication successful!')).toBeTruthy();\n     });\n \n-    it('should call onSuccess when status changes to success', () => {\n-      const { rerender } = render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      // Initially processing\n+    it('should pass onSuccess callback to hook and render success state', () => {\n       mockUseOAuthCallback.mockReturnValue({\n-        status: 'processing',\n-        message: 'Processing...',\n+        status: 'success',\n+        message: 'Authentication successful!',\n         handleCallback: jest.fn(),\n         retry: jest.fn(),\n       });\n \n-      rerender(\n+      const { getByText, getByTestId } = render(\n         <OAuthCallbackScreen\n           config={mockConfig}\n           onSuccess={mockOnSuccess}\n           onError={mockOnError}\n         />\n       );\n \n-      // Change to success\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'success',\n-        message: 'Success!',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      rerender(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n+      // Verify the hook was called with the onSuccess callback\n+      expect(mockUseOAuthCallback).toHaveBeenCalledWith(\n+        {}, // default empty params\n+        mockConfig,\n+        {\n+          onSuccess: mockOnSuccess,\n+          onError: mockOnError,\n+          autoStart: true,\n+        }\n       );\n \n-      expect(mockOnSuccess).toHaveBeenCalledTimes(1);\n+      // Verify the component renders success state correctly\n+      expect(getByTestId('oauth-callback-success')).toBeTruthy();\n+      expect(getByText('Success!')).toBeTruthy();\n+      expect(getByText('Authentication successful!')).toBeTruthy();\n     });\n \n     it('should render custom success message', () => {\n       mockUseOAuthCallback.mockReturnValue({\n"
                },
                {
                    "date": 1752916158695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,300 +196,25 @@\n       expect(getByText('Authentication failed')).toBeTruthy();\n       expect(getByText('Try Again')).toBeTruthy();\n     });\n \n-    it('should call onError when status changes to error', () => {\n-      const { rerender } = render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      // Initially processing\n+    it('should pass onError callback to hook and render error state', () => {\n       mockUseOAuthCallback.mockReturnValue({\n-        status: 'processing',\n-        message: 'Processing...',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      rerender(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      // Change to error\n-      mockUseOAuthCallback.mockReturnValue({\n         status: 'error',\n         message: 'Authentication failed',\n         handleCallback: jest.fn(),\n         retry: jest.fn(),\n       });\n \n-      rerender(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      expect(mockOnError).toHaveBeenCalledWith('Authentication failed');\n-    });\n-\n-    it('should call retry when Try Again button is pressed', () => {\n-      const mockRetry = jest.fn();\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'error',\n-        message: 'Network error',\n-        handleCallback: jest.fn(),\n-        retry: mockRetry,\n-      });\n-\n-      const { getByText } = render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      const retryButton = getByText('Try Again');\n-      fireEvent.press(retryButton);\n-\n-      expect(mockRetry).toHaveBeenCalledTimes(1);\n-    });\n-\n-    it('should render custom error message', () => {\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'error',\n-        message: 'User denied access',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      const { getByText } = render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      expect(getByText('User denied access')).toBeTruthy();\n-    });\n-  });\n-\n-  describe('custom styling', () => {\n-    it('should apply custom container style', () => {\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'processing',\n-        message: 'Processing...',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      const customStyle = { backgroundColor: 'red' };\n-\n-      const { getByTestId } = render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-          style={customStyle}\n-        />\n-      );\n-\n-      const container = getByTestId('oauth-callback-container');\n-      expect(container.props.style).toEqual(\n-        expect.arrayContaining([expect.objectContaining(customStyle)])\n-      );\n-    });\n-\n-    it('should apply custom text style', () => {\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'processing',\n-        message: 'Processing...',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      const customTextStyle = { color: 'blue', fontSize: 20 };\n-\n-      const { getByTestId } = render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-          textStyle={customTextStyle}\n-        />\n-      );\n-\n-      const text = getByTestId('oauth-callback-text');\n-      expect(text.props.style).toEqual(\n-        expect.arrayContaining([expect.objectContaining(customTextStyle)])\n-      );\n-    });\n-\n-    it('should apply custom button style', () => {\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'error',\n-        message: 'Error occurred',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      const customButtonStyle = { backgroundColor: 'green' };\n-\n-      const { getByTestId } = render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-          buttonStyle={customButtonStyle}\n-        />\n-      );\n-\n-      const button = getByTestId('oauth-callback-retry-button');\n-      expect(button.props.style).toEqual(\n-        expect.objectContaining(customButtonStyle)\n-      );\n-    });\n-  });\n-\n-  describe('accessibility', () => {\n-    it('should have proper accessibility labels', () => {\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'error',\n-        message: 'Authentication failed',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      const { getByTestId } = render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      const retryButton = getByTestId('oauth-callback-retry-button');\n-      expect(retryButton.props.accessibilityLabel).toBe('Retry OAuth authentication');\n-      expect(retryButton.props.accessibilityRole).toBe('button');\n-    });\n-  });\n-\n-  describe('edge cases', () => {\n-    it('should handle missing onSuccess callback', () => {\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'success',\n-        message: 'Success!',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      expect(() =>\n-        render(\n-          <OAuthCallbackScreen\n-            config={mockConfig}\n-            onError={mockOnError}\n-          />\n-        )\n-      ).not.toThrow();\n-    });\n-\n-    it('should handle missing onError callback', () => {\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'error',\n-        message: 'Error!',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      expect(() =>\n-        render(\n-          <OAuthCallbackScreen\n-            config={mockConfig}\n-            onSuccess={mockOnSuccess}\n-          />\n-        )\n-      ).not.toThrow();\n-    });\n-  });\n-});\n-import React from 'react';\n-import { render, fireEvent, waitFor } from '@testing-library/react-native';\n-import { OAuthCallbackScreen } from '../../components/OAuthCallbackScreen';\n-import { useOAuthCallback } from '../../hooks/useOAuthCallback';\n-import type { ExpoOAuthConfig } from '../../types';\n-\n-// Mock the hook\n-jest.mock('../../hooks/useOAuthCallback');\n-\n-const mockUseOAuthCallback = useOAuthCallback as jest.MockedFunction<typeof useOAuthCallback>;\n-\n-describe('OAuthCallbackScreen', () => {\n-  const mockConfig: ExpoOAuthConfig = {\n-    clientId: 'test-client-id',\n-    endpoints: {\n-      authorization: 'https://auth.example.com/authorize',\n-      token: 'https://auth.example.com/token',\n-    },\n-    redirectUri: 'myapp://oauth/callback',\n-    scopes: ['read', 'write'],\n-  };\n-\n-  const mockOnSuccess = jest.fn();\n-  const mockOnError = jest.fn();\n-\n-  beforeEach(() => {\n-    jest.clearAllMocks();\n-  });\n-\n-  describe('processing state', () => {\n-    it('should render processing state correctly', () => {\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'processing',\n-        message: 'Processing OAuth callback...',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n       const { getByText, getByTestId } = render(\n         <OAuthCallbackScreen\n           config={mockConfig}\n           onSuccess={mockOnSuccess}\n           onError={mockOnError}\n         />\n       );\n \n-      expect(getByTestId('oauth-callback-processing')).toBeTruthy();\n-      expect(getByText('Processing OAuth callback...')).toBeTruthy();\n-    });\n-\n-    it('should initialize with processing state and auto-start callback', async () => {\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'processing',\n-        message: 'Processing OAuth callback...',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      // Verify the hook was called with correct parameters including autoStart: true\n+      // Verify the hook was called with the onError callback\n       expect(mockUseOAuthCallback).toHaveBeenCalledWith(\n         {}, // default empty params\n         mockConfig,\n         {\n@@ -498,185 +223,15 @@\n           autoStart: true,\n         }\n       );\n \n-      // Verify the component shows processing state\n-      expect(screen.getByText('Authenticating...')).toBeInTheDocument();\n-      expect(screen.getByText('Processing OAuth callback...')).toBeInTheDocument();\n-    });\n-\n-    it('should render custom processing message', () => {\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'processing',\n-        message: 'Custom processing message',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      const { getByText } = render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      expect(getByText('Custom processing message')).toBeTruthy();\n-    });\n-  });\n-\n-  describe('success state', () => {\n-    it('should render success state correctly', () => {\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'success',\n-        message: 'Authentication successful!',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      const { getByText, getByTestId } = render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      expect(getByTestId('oauth-callback-success')).toBeTruthy();\n-      expect(getByText('Authentication successful!')).toBeTruthy();\n-    });\n-\n-    it('should call onSuccess when status changes to success', () => {\n-      const { rerender } = render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      // Initially processing\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'processing',\n-        message: 'Processing...',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      rerender(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      // Change to success\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'success',\n-        message: 'Success!',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      rerender(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      expect(mockOnSuccess).toHaveBeenCalledTimes(1);\n-    });\n-\n-    it('should render custom success message', () => {\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'success',\n-        message: 'Login completed successfully!',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      const { getByText } = render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      expect(getByText('Login completed successfully!')).toBeTruthy();\n-    });\n-  });\n-\n-  describe('error state', () => {\n-    it('should render error state correctly', () => {\n-      const mockRetry = jest.fn();\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'error',\n-        message: 'Authentication failed',\n-        handleCallback: jest.fn(),\n-        retry: mockRetry,\n-      });\n-\n-      const { getByText, getByTestId } = render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n+      // Verify the component renders error state correctly\n       expect(getByTestId('oauth-callback-error')).toBeTruthy();\n+      expect(getByText('Authentication Failed')).toBeTruthy();\n       expect(getByText('Authentication failed')).toBeTruthy();\n       expect(getByText('Try Again')).toBeTruthy();\n     });\n \n-    it('should call onError when status changes to error', () => {\n-      const { rerender } = render(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      // Initially processing\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'processing',\n-        message: 'Processing...',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      rerender(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      // Change to error\n-      mockUseOAuthCallback.mockReturnValue({\n-        status: 'error',\n-        message: 'Authentication failed',\n-        handleCallback: jest.fn(),\n-        retry: jest.fn(),\n-      });\n-\n-      rerender(\n-        <OAuthCallbackScreen\n-          config={mockConfig}\n-          onSuccess={mockOnSuccess}\n-          onError={mockOnError}\n-        />\n-      );\n-\n-      expect(mockOnError).toHaveBeenCalledWith('Authentication failed');\n-    });\n-\n     it('should call retry when Try Again button is pressed', () => {\n       const mockRetry = jest.fn();\n       mockUseOAuthCallback.mockReturnValue({\n         status: 'error',\n"
                },
                {
                    "date": 1753013605252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,16 @@\n import React from 'react';\n-import { render, fireEvent, waitFor } from '@testing-library/react-native';\n+import { render, fireEvent } from '@testing-library/react-native';\n import { OAuthCallbackScreen } from '../../components/OAuthCallbackScreen';\n import { useOAuthCallback } from '../../hooks/useOAuthCallback';\n import type { ExpoOAuthConfig } from '../../types';\n \n // Mock the hook\n jest.mock('../../hooks/useOAuthCallback');\n \n-const mockUseOAuthCallback = useOAuthCallback as jest.MockedFunction<typeof useOAuthCallback>;\n+const mockUseOAuthCallback = useOAuthCallback as jest.MockedFunction<\n+  typeof useOAuthCallback\n+>;\n \n describe('OAuthCallbackScreen', () => {\n   const mockConfig: ExpoOAuthConfig = {\n     clientId: 'test-client-id',\n@@ -368,9 +370,11 @@\n         />\n       );\n \n       const retryButton = getByTestId('oauth-callback-retry-button');\n-      expect(retryButton.props.accessibilityLabel).toBe('Retry OAuth authentication');\n+      expect(retryButton.props.accessibilityLabel).toBe(\n+        'Retry OAuth authentication'\n+      );\n       expect(retryButton.props.accessibilityRole).toBe('button');\n     });\n   });\n \n@@ -384,12 +388,9 @@\n       });\n \n       expect(() =>\n         render(\n-          <OAuthCallbackScreen\n-            config={mockConfig}\n-            onError={mockOnError}\n-          />\n+          <OAuthCallbackScreen config={mockConfig} onError={mockOnError} />\n         )\n       ).not.toThrow();\n     });\n \n@@ -402,12 +403,9 @@\n       });\n \n       expect(() =>\n         render(\n-          <OAuthCallbackScreen\n-            config={mockConfig}\n-            onSuccess={mockOnSuccess}\n-          />\n+          <OAuthCallbackScreen config={mockConfig} onSuccess={mockOnSuccess} />\n         )\n       ).not.toThrow();\n     });\n   });\n"
                },
                {
                    "date": 1753027312865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React from 'react';\n+\n import { render, fireEvent } from '@testing-library/react-native';\n import { OAuthCallbackScreen } from '../../components/OAuthCallbackScreen';\n import { useOAuthCallback } from '../../hooks/useOAuthCallback';\n import type { ExpoOAuthConfig } from '../../types';\n"
                },
                {
                    "date": 1753027572671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,11 +16,14 @@\n     clientId: 'test-client-id',\n     endpoints: {\n       authorization: 'https://auth.example.com/authorize',\n       token: 'https://auth.example.com/token',\n+      revocation: 'https://auth.example.com/revoke',\n     },\n     redirectUri: 'myapp://oauth/callback',\n     scopes: ['read', 'write'],\n+    scheme: 'myapp',\n+    path: 'oauth/callback',\n   };\n \n   const mockOnSuccess = jest.fn();\n   const mockOnError = jest.fn();\n"
                }
            ],
            "date": 1752904218550,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport { OAuthCallbackScreen } from '../../components/OAuthCallbackScreen';\nimport { useOAuthCallback } from '../../hooks/useOAuthCallback';\nimport type { ExpoOAuthConfig } from '../../types';\n\n// Mock the hook\njest.mock('../../hooks/useOAuthCallback');\n\nconst mockUseOAuthCallback = useOAuthCallback as jest.MockedFunction<typeof useOAuthCallback>;\n\ndescribe('OAuthCallbackScreen', () => {\n  const mockConfig: ExpoOAuthConfig = {\n    clientId: 'test-client-id',\n    endpoints: {\n      authorization: 'https://auth.example.com/authorize',\n      token: 'https://auth.example.com/token',\n    },\n    redirectUri: 'myapp://oauth/callback',\n    scopes: ['read', 'write'],\n  };\n\n  const mockOnSuccess = jest.fn();\n  const mockOnError = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('processing state', () => {\n    it('should render processing state correctly', () => {\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'processing',\n        message: 'Processing OAuth callback...',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      const { getByText, getByTestId } = render(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      expect(getByTestId('oauth-callback-processing')).toBeTruthy();\n      expect(getByText('Processing OAuth callback...')).toBeTruthy();\n    });\n\n    it('should call handleCallback on mount when processing', async () => {\n      const mockHandleCallback = jest.fn();\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'processing',\n        message: 'Processing OAuth callback...',\n        handleCallback: mockHandleCallback,\n        retry: jest.fn(),\n      });\n\n      render(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      await waitFor(() => {\n        expect(mockHandleCallback).toHaveBeenCalledTimes(1);\n      });\n    });\n\n    it('should render custom processing message', () => {\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'processing',\n        message: 'Custom processing message',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      const { getByText } = render(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      expect(getByText('Custom processing message')).toBeTruthy();\n    });\n  });\n\n  describe('success state', () => {\n    it('should render success state correctly', () => {\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'success',\n        message: 'Authentication successful!',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      const { getByText, getByTestId } = render(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      expect(getByTestId('oauth-callback-success')).toBeTruthy();\n      expect(getByText('Authentication successful!')).toBeTruthy();\n    });\n\n    it('should call onSuccess when status changes to success', () => {\n      const { rerender } = render(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      // Initially processing\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'processing',\n        message: 'Processing...',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      rerender(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      // Change to success\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'success',\n        message: 'Success!',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      rerender(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      expect(mockOnSuccess).toHaveBeenCalledTimes(1);\n    });\n\n    it('should render custom success message', () => {\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'success',\n        message: 'Login completed successfully!',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      const { getByText } = render(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      expect(getByText('Login completed successfully!')).toBeTruthy();\n    });\n  });\n\n  describe('error state', () => {\n    it('should render error state correctly', () => {\n      const mockRetry = jest.fn();\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'error',\n        message: 'Authentication failed',\n        handleCallback: jest.fn(),\n        retry: mockRetry,\n      });\n\n      const { getByText, getByTestId } = render(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      expect(getByTestId('oauth-callback-error')).toBeTruthy();\n      expect(getByText('Authentication failed')).toBeTruthy();\n      expect(getByText('Try Again')).toBeTruthy();\n    });\n\n    it('should call onError when status changes to error', () => {\n      const { rerender } = render(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      // Initially processing\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'processing',\n        message: 'Processing...',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      rerender(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      // Change to error\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'error',\n        message: 'Authentication failed',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      rerender(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      expect(mockOnError).toHaveBeenCalledWith('Authentication failed');\n    });\n\n    it('should call retry when Try Again button is pressed', () => {\n      const mockRetry = jest.fn();\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'error',\n        message: 'Network error',\n        handleCallback: jest.fn(),\n        retry: mockRetry,\n      });\n\n      const { getByText } = render(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      const retryButton = getByText('Try Again');\n      fireEvent.press(retryButton);\n\n      expect(mockRetry).toHaveBeenCalledTimes(1);\n    });\n\n    it('should render custom error message', () => {\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'error',\n        message: 'User denied access',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      const { getByText } = render(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      expect(getByText('User denied access')).toBeTruthy();\n    });\n  });\n\n  describe('custom styling', () => {\n    it('should apply custom container style', () => {\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'processing',\n        message: 'Processing...',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      const customStyle = { backgroundColor: 'red' };\n\n      const { getByTestId } = render(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n          style={customStyle}\n        />\n      );\n\n      const container = getByTestId('oauth-callback-container');\n      expect(container.props.style).toEqual(\n        expect.arrayContaining([expect.objectContaining(customStyle)])\n      );\n    });\n\n    it('should apply custom text style', () => {\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'processing',\n        message: 'Processing...',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      const customTextStyle = { color: 'blue', fontSize: 20 };\n\n      const { getByTestId } = render(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n          textStyle={customTextStyle}\n        />\n      );\n\n      const text = getByTestId('oauth-callback-text');\n      expect(text.props.style).toEqual(\n        expect.arrayContaining([expect.objectContaining(customTextStyle)])\n      );\n    });\n\n    it('should apply custom button style', () => {\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'error',\n        message: 'Error occurred',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      const customButtonStyle = { backgroundColor: 'green' };\n\n      const { getByTestId } = render(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n          buttonStyle={customButtonStyle}\n        />\n      );\n\n      const button = getByTestId('oauth-callback-retry-button');\n      expect(button.props.style).toEqual(\n        expect.objectContaining(customButtonStyle)\n      );\n    });\n  });\n\n  describe('accessibility', () => {\n    it('should have proper accessibility labels', () => {\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'error',\n        message: 'Authentication failed',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      const { getByTestId } = render(\n        <OAuthCallbackScreen\n          config={mockConfig}\n          onSuccess={mockOnSuccess}\n          onError={mockOnError}\n        />\n      );\n\n      const retryButton = getByTestId('oauth-callback-retry-button');\n      expect(retryButton.props.accessibilityLabel).toBe('Retry OAuth authentication');\n      expect(retryButton.props.accessibilityRole).toBe('button');\n    });\n  });\n\n  describe('edge cases', () => {\n    it('should handle missing onSuccess callback', () => {\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'success',\n        message: 'Success!',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      expect(() =>\n        render(\n          <OAuthCallbackScreen\n            config={mockConfig}\n            onError={mockOnError}\n          />\n        )\n      ).not.toThrow();\n    });\n\n    it('should handle missing onError callback', () => {\n      mockUseOAuthCallback.mockReturnValue({\n        status: 'error',\n        message: 'Error!',\n        handleCallback: jest.fn(),\n        retry: jest.fn(),\n      });\n\n      expect(() =>\n        render(\n          <OAuthCallbackScreen\n            config={mockConfig}\n            onSuccess={mockOnSuccess}\n          />\n        )\n      ).not.toThrow();\n    });\n  });\n});\n"
        }
    ]
}