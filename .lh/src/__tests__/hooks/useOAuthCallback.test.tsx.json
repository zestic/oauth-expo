{
    "sourceFile": "src/__tests__/hooks/useOAuthCallback.test.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1752853261003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752853271762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n   });\n \n   describe('initial state', () => {\n     it('should return initial state correctly', () => {\n-      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n+      const { result } = renderHook(() => useOAuthCallback(mockParams, mockConfig, { autoStart: false }));\n \n       expect(result.current.status).toBe('processing');\n       expect(result.current.message).toBe('Processing OAuth callback...');\n       expect(typeof result.current.handleCallback).toBe('function');\n"
                },
                {
                    "date": 1752853287153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,17 @@\n import React from 'react';\n import { renderHook, act } from '@testing-library/react-native';\n-import { OAuthCore } from '@zestic/oauth-core';\n import { useOAuthCallback } from '../../hooks/useOAuthCallback';\n+import { ExpoOAuthAdapter } from '../../ExpoOAuthAdapter';\n import type { ExpoOAuthConfig } from '../../types';\n \n-// Mock OAuthCore\n-jest.mock('@zestic/oauth-core', () => ({\n-  OAuthCore: jest.fn(),\n+// Mock ExpoOAuthAdapter\n+jest.mock('../../ExpoOAuthAdapter', () => ({\n+  ExpoOAuthAdapter: jest.fn(),\n }));\n \n-// Mock adapters\n-jest.mock('../../adapters', () => ({\n-  ExpoStorageAdapter: jest.fn(),\n-  ExpoHttpAdapter: jest.fn(),\n-  ExpoPKCEAdapter: jest.fn(),\n-}));\n+const MockedExpoOAuthAdapter = ExpoOAuthAdapter as jest.MockedClass<typeof ExpoOAuthAdapter>;\n \n-const MockedOAuthCore = OAuthCore as jest.MockedClass<typeof OAuthCore>;\n-\n describe('useOAuthCallback', () => {\n   let mockOAuthCore: jest.Mocked<OAuthCore>;\n \n   const mockConfig: ExpoOAuthConfig = {\n"
                },
                {
                    "date": 1752853301286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n const MockedExpoOAuthAdapter = ExpoOAuthAdapter as jest.MockedClass<typeof ExpoOAuthAdapter>;\n \n describe('useOAuthCallback', () => {\n-  let mockOAuthCore: jest.Mocked<OAuthCore>;\n+  let mockAdapter: jest.Mocked<ExpoOAuthAdapter>;\n \n   const mockConfig: ExpoOAuthConfig = {\n     clientId: 'test-client-id',\n     endpoints: {\n@@ -33,13 +33,13 @@\n \n   beforeEach(() => {\n     jest.clearAllMocks();\n \n-    mockOAuthCore = {\n+    mockAdapter = {\n       handleCallback: jest.fn(),\n     } as any;\n \n-    MockedOAuthCore.mockImplementation(() => mockOAuthCore);\n+    MockedExpoOAuthAdapter.mockImplementation(() => mockAdapter);\n   });\n \n   describe('initial state', () => {\n     it('should return initial state correctly', () => {\n"
                },
                {
                    "date": 1752853330588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,11 +62,11 @@\n         },\n         message: 'Authentication successful',\n       };\n \n-      mockOAuthCore.handleCallback.mockResolvedValue(mockResult as any);\n+      mockAdapter.handleCallback.mockResolvedValue(mockResult as any);\n \n-      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n+      const { result } = renderHook(() => useOAuthCallback(mockParams, mockConfig));\n \n       // Mock URL with authorization code\n       const mockUrl = 'myapp://oauth/callback?code=auth-code-123&state=state-456';\n       Object.defineProperty(window, 'location', {\n"
                },
                {
                    "date": 1752853343011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,11 +79,9 @@\n       });\n \n       expect(result.current.status).toBe('success');\n       expect(result.current.message).toBe('Authentication successful');\n-      expect(mockOAuthCore.handleCallback).toHaveBeenCalledWith(\n-        expect.any(URLSearchParams)\n-      );\n+      expect(mockAdapter.handleCallback).toHaveBeenCalledWith(mockParams);\n     });\n \n     it('should handle magic link callback', async () => {\n       const mockResult = {\n"
                },
                {
                    "date": 1752853463379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React from 'react';\n-import { renderHook, act } from '@testing-library/react-native';\n+import { renderHook, act, waitFor } from '@testing-library/react-native';\n import { useOAuthCallback } from '../../hooks/useOAuthCallback';\n import { ExpoOAuthAdapter } from '../../ExpoOAuthAdapter';\n-import type { ExpoOAuthConfig } from '../../types';\n+import type { ExpoOAuthConfig, OAuthCallbackParams } from '../../types';\n \n // Mock ExpoOAuthAdapter\n jest.mock('../../ExpoOAuthAdapter', () => ({\n   ExpoOAuthAdapter: jest.fn(),\n@@ -55,249 +55,184 @@\n   describe('handleCallback', () => {\n     it('should handle successful authorization code callback', async () => {\n       const mockResult = {\n         success: true,\n-        tokens: {\n-          accessToken: 'access-token-123',\n-          refreshToken: 'refresh-token-456',\n-        },\n-        message: 'Authentication successful',\n+        accessToken: 'token-123',\n+        refreshToken: 'refresh-456',\n       };\n \n       mockAdapter.handleCallback.mockResolvedValue(mockResult as any);\n \n       const { result } = renderHook(() => useOAuthCallback(mockParams, mockConfig));\n \n-      // Mock URL with authorization code\n-      const mockUrl = 'myapp://oauth/callback?code=auth-code-123&state=state-456';\n-      Object.defineProperty(window, 'location', {\n-        value: { href: mockUrl },\n-        writable: true,\n+      await waitFor(() => {\n+        expect(result.current.status).toBe('success');\n+        expect(result.current.message).toBe('Authentication successful');\n+        expect(mockAdapter.handleCallback).toHaveBeenCalledWith(mockParams);\n       });\n-\n-      await act(async () => {\n-        await result.current.handleCallback();\n-      });\n-\n-      expect(result.current.status).toBe('success');\n-      expect(result.current.message).toBe('Authentication successful');\n-      expect(mockAdapter.handleCallback).toHaveBeenCalledWith(mockParams);\n     });\n \n     it('should handle magic link callback', async () => {\n+      const magicLinkParams = {\n+        token: 'magic-token-123',\n+        flow: 'login' as const,\n+      };\n+\n       const mockResult = {\n         success: true,\n-        tokens: {\n-          accessToken: 'magic-token-123',\n-        },\n-        message: 'Magic link authentication successful',\n+        accessToken: 'token-456',\n       };\n \n-      mockOAuthCore.handleCallback.mockResolvedValue(mockResult as any);\n+      mockAdapter.handleCallback.mockResolvedValue(mockResult as any);\n \n-      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n+      const { result } = renderHook(() => useOAuthCallback(magicLinkParams, mockConfig));\n \n-      // Mock URL with magic link token\n-      const mockUrl = 'myapp://oauth/callback?token=magic-token&flow=magic_link';\n-      Object.defineProperty(window, 'location', {\n-        value: { href: mockUrl },\n-        writable: true,\n+      await waitFor(() => {\n+        expect(result.current.status).toBe('success');\n+        expect(result.current.message).toBe('Authentication successful');\n       });\n-\n-      await act(async () => {\n-        await result.current.handleCallback();\n-      });\n-\n-      expect(result.current.status).toBe('success');\n-      expect(result.current.message).toBe('Magic link authentication successful');\n     });\n \n     it('should handle OAuth errors', async () => {\n+      const errorParams = {\n+        error: 'access_denied',\n+        error_description: 'User denied access',\n+      };\n+\n       const mockResult = {\n         success: false,\n         error: 'access_denied',\n         message: 'User denied access',\n       };\n \n-      mockOAuthCore.handleCallback.mockResolvedValue(mockResult as any);\n+      mockAdapter.handleCallback.mockResolvedValue(mockResult as any);\n \n-      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n+      const { result } = renderHook(() => useOAuthCallback(errorParams, mockConfig));\n \n-      // Mock URL with error\n-      const mockUrl = 'myapp://oauth/callback?error=access_denied&error_description=User%20denied%20access';\n-      Object.defineProperty(window, 'location', {\n-        value: { href: mockUrl },\n-        writable: true,\n+      await waitFor(() => {\n+        expect(result.current.status).toBe('error');\n+        expect(result.current.message).toBe('access_denied');\n       });\n-\n-      await act(async () => {\n-        await result.current.handleCallback();\n-      });\n-\n-      expect(result.current.status).toBe('error');\n-      expect(result.current.message).toBe('User denied access');\n     });\n \n     it('should handle network errors', async () => {\n-      mockOAuthCore.handleCallback.mockRejectedValue(new Error('Network error'));\n+      mockAdapter.handleCallback.mockRejectedValue(new Error('Network error'));\n \n-      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n+      const { result } = renderHook(() => useOAuthCallback(mockParams, mockConfig));\n \n-      const mockUrl = 'myapp://oauth/callback?code=auth-code-123';\n-      Object.defineProperty(window, 'location', {\n-        value: { href: mockUrl },\n-        writable: true,\n+      await waitFor(() => {\n+        expect(result.current.status).toBe('error');\n+        expect(result.current.message).toBe('Network error');\n       });\n-\n-      await act(async () => {\n-        await result.current.handleCallback();\n-      });\n-\n-      expect(result.current.status).toBe('error');\n-      expect(result.current.message).toBe('Network error');\n     });\n \n     it('should handle unknown errors', async () => {\n-      mockOAuthCore.handleCallback.mockRejectedValue('Unknown error');\n+      mockAdapter.handleCallback.mockRejectedValue(new Error('An unknown error occurred'));\n \n-      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n+      const { result } = renderHook(() => useOAuthCallback(mockParams, mockConfig));\n \n-      const mockUrl = 'myapp://oauth/callback?code=auth-code-123';\n-      Object.defineProperty(window, 'location', {\n-        value: { href: mockUrl },\n-        writable: true,\n+      await waitFor(() => {\n+        expect(result.current.status).toBe('error');\n+        expect(result.current.message).toBe('An unknown error occurred');\n       });\n-\n-      await act(async () => {\n-        await result.current.handleCallback();\n-      });\n-\n-      expect(result.current.status).toBe('error');\n-      expect(result.current.message).toBe('An unknown error occurred');\n     });\n \n     it('should handle empty URL parameters', async () => {\n+      const emptyParams = {};\n+\n       const mockResult = {\n         success: false,\n         error: 'invalid_request',\n         message: 'No valid parameters found',\n       };\n \n-      mockOAuthCore.handleCallback.mockResolvedValue(mockResult as any);\n+      mockAdapter.handleCallback.mockResolvedValue(mockResult as any);\n \n-      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n+      const { result } = renderHook(() => useOAuthCallback(emptyParams, mockConfig));\n \n-      // Mock URL without parameters\n-      const mockUrl = 'myapp://oauth/callback';\n-      Object.defineProperty(window, 'location', {\n-        value: { href: mockUrl },\n-        writable: true,\n+      await waitFor(() => {\n+        expect(result.current.status).toBe('error');\n+        expect(result.current.message).toBe('No valid parameters found');\n       });\n-\n-      await act(async () => {\n-        await result.current.handleCallback();\n-      });\n-\n-      expect(result.current.status).toBe('error');\n-      expect(result.current.message).toBe('No valid parameters found');\n     });\n   });\n \n   describe('retry', () => {\n     it('should reset status to processing and allow retry', async () => {\n-      mockOAuthCore.handleCallback.mockRejectedValue(new Error('Network error'));\n+      // First attempt fails\n+      mockAdapter.handleCallback.mockRejectedValueOnce(new Error('Network error'));\n+      \n+      // Second attempt succeeds\n+      const mockResult = {\n+        success: true,\n+        accessToken: 'token-123',\n+      };\n+      mockAdapter.handleCallback.mockResolvedValueOnce(mockResult as any);\n \n-      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n+      const { result } = renderHook(() => useOAuthCallback(mockParams, mockConfig));\n \n-      const mockUrl = 'myapp://oauth/callback?code=auth-code-123';\n-      Object.defineProperty(window, 'location', {\n-        value: { href: mockUrl },\n-        writable: true,\n+      // Wait for first attempt to fail\n+      await waitFor(() => {\n+        expect(result.current.status).toBe('error');\n       });\n \n-      // First attempt fails\n+      // Retry\n       await act(async () => {\n-        await result.current.handleCallback();\n-      });\n-\n-      expect(result.current.status).toBe('error');\n-\n-      // Retry\n-      act(() => {\n         result.current.retry();\n       });\n \n       expect(result.current.status).toBe('processing');\n       expect(result.current.message).toBe('Processing OAuth callback...');\n \n       // Second attempt succeeds\n-      const mockResult = {\n-        success: true,\n-        tokens: { accessToken: 'token-123' },\n-        message: 'Success',\n-      };\n-      mockOAuthCore.handleCallback.mockResolvedValue(mockResult as any);\n-\n-      await act(async () => {\n-        await result.current.handleCallback();\n+      await waitFor(() => {\n+        expect(result.current.status).toBe('success');\n+        expect(result.current.message).toBe('Authentication successful');\n       });\n-\n-      expect(result.current.status).toBe('success');\n-      expect(result.current.message).toBe('Success');\n     });\n   });\n \n   describe('URL parsing', () => {\n     it('should correctly parse URL parameters', async () => {\n+      const complexParams = {\n+        code: 'test-code',\n+        state: 'test-state',\n+        custom_param: 'value',\n+      };\n+\n       const mockResult = {\n         success: true,\n-        tokens: { accessToken: 'token-123' },\n-        message: 'Success',\n+        accessToken: 'token-123',\n       };\n \n-      mockOAuthCore.handleCallback.mockResolvedValue(mockResult as any);\n+      mockAdapter.handleCallback.mockResolvedValue(mockResult as any);\n \n-      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n+      const { result } = renderHook(() => useOAuthCallback(complexParams, mockConfig));\n \n-      const mockUrl = 'myapp://oauth/callback?code=test-code&state=test-state&custom_param=value';\n-      Object.defineProperty(window, 'location', {\n-        value: { href: mockUrl },\n-        writable: true,\n+      await waitFor(() => {\n+        expect(result.current.status).toBe('success');\n+        expect(mockAdapter.handleCallback).toHaveBeenCalledWith(complexParams);\n       });\n-\n-      await act(async () => {\n-        await result.current.handleCallback();\n-      });\n-\n-      const urlParams = mockOAuthCore.handleCallback.mock.calls[0][0] as URLSearchParams;\n-      expect(urlParams.get('code')).toBe('test-code');\n-      expect(urlParams.get('state')).toBe('test-state');\n-      expect(urlParams.get('custom_param')).toBe('value');\n     });\n \n     it('should handle URL encoded parameters', async () => {\n+      const encodedParams = {\n+        error_description: 'User denied access',\n+        state: 'test+state',\n+      };\n+\n       const mockResult = {\n-        success: true,\n-        tokens: { accessToken: 'token-123' },\n-        message: 'Success',\n+        success: false,\n+        error: 'access_denied',\n       };\n \n-      mockOAuthCore.handleCallback.mockResolvedValue(mockResult as any);\n+      mockAdapter.handleCallback.mockResolvedValue(mockResult as any);\n \n-      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n+      const { result } = renderHook(() => useOAuthCallback(encodedParams, mockConfig));\n \n-      const mockUrl = 'myapp://oauth/callback?error_description=User%20denied%20access&state=test%2Bstate';\n-      Object.defineProperty(window, 'location', {\n-        value: { href: mockUrl },\n-        writable: true,\n+      await waitFor(() => {\n+        expect(result.current.status).toBe('error');\n+        expect(mockAdapter.handleCallback).toHaveBeenCalledWith(encodedParams);\n       });\n-\n-      await act(async () => {\n-        await result.current.handleCallback();\n-      });\n-\n-      const urlParams = mockOAuthCore.handleCallback.mock.calls[0][0] as URLSearchParams;\n-      expect(urlParams.get('error_description')).toBe('User denied access');\n-      expect(urlParams.get('state')).toBe('test+state');\n     });\n   });\n });\n"
                },
                {
                    "date": 1752853473288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n       const { result } = renderHook(() => useOAuthCallback(emptyParams, mockConfig));\n \n       await waitFor(() => {\n         expect(result.current.status).toBe('error');\n-        expect(result.current.message).toBe('No valid parameters found');\n+        expect(result.current.message).toBe('invalid_request');\n       });\n     });\n   });\n \n"
                },
                {
                    "date": 1752853486135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,16 +175,13 @@\n         expect(result.current.status).toBe('error');\n       });\n \n       // Retry\n-      await act(async () => {\n+      act(() => {\n         result.current.retry();\n       });\n \n-      expect(result.current.status).toBe('processing');\n-      expect(result.current.message).toBe('Processing OAuth callback...');\n-\n-      // Second attempt succeeds\n+      // The retry should trigger handleCallback again, which will succeed\n       await waitFor(() => {\n         expect(result.current.status).toBe('success');\n         expect(result.current.message).toBe('Authentication successful');\n       });\n"
                }
            ],
            "date": 1752853261003,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport { renderHook, act } from '@testing-library/react-native';\nimport { OAuthCore } from '@zestic/oauth-core';\nimport { useOAuthCallback } from '../../hooks/useOAuthCallback';\nimport type { ExpoOAuthConfig } from '../../types';\n\n// Mock OAuthCore\njest.mock('@zestic/oauth-core', () => ({\n  OAuthCore: jest.fn(),\n}));\n\n// Mock adapters\njest.mock('../../adapters', () => ({\n  ExpoStorageAdapter: jest.fn(),\n  ExpoHttpAdapter: jest.fn(),\n  ExpoPKCEAdapter: jest.fn(),\n}));\n\nconst MockedOAuthCore = OAuthCore as jest.MockedClass<typeof OAuthCore>;\n\ndescribe('useOAuthCallback', () => {\n  let mockOAuthCore: jest.Mocked<OAuthCore>;\n\n  const mockConfig: ExpoOAuthConfig = {\n    clientId: 'test-client-id',\n    endpoints: {\n      authorization: 'https://auth.example.com/authorize',\n      token: 'https://auth.example.com/token',\n    },\n    redirectUri: 'myapp://oauth/callback',\n    scopes: ['read', 'write'],\n    scheme: 'myapp',\n    path: '/oauth/callback',\n  };\n\n  const mockParams: OAuthCallbackParams = {\n    code: 'test-code',\n    state: 'test-state',\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    mockOAuthCore = {\n      handleCallback: jest.fn(),\n    } as any;\n\n    MockedOAuthCore.mockImplementation(() => mockOAuthCore);\n  });\n\n  describe('initial state', () => {\n    it('should return initial state correctly', () => {\n      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n\n      expect(result.current.status).toBe('processing');\n      expect(result.current.message).toBe('Processing OAuth callback...');\n      expect(typeof result.current.handleCallback).toBe('function');\n      expect(typeof result.current.retry).toBe('function');\n    });\n  });\n\n  describe('handleCallback', () => {\n    it('should handle successful authorization code callback', async () => {\n      const mockResult = {\n        success: true,\n        tokens: {\n          accessToken: 'access-token-123',\n          refreshToken: 'refresh-token-456',\n        },\n        message: 'Authentication successful',\n      };\n\n      mockOAuthCore.handleCallback.mockResolvedValue(mockResult as any);\n\n      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n\n      // Mock URL with authorization code\n      const mockUrl = 'myapp://oauth/callback?code=auth-code-123&state=state-456';\n      Object.defineProperty(window, 'location', {\n        value: { href: mockUrl },\n        writable: true,\n      });\n\n      await act(async () => {\n        await result.current.handleCallback();\n      });\n\n      expect(result.current.status).toBe('success');\n      expect(result.current.message).toBe('Authentication successful');\n      expect(mockOAuthCore.handleCallback).toHaveBeenCalledWith(\n        expect.any(URLSearchParams)\n      );\n    });\n\n    it('should handle magic link callback', async () => {\n      const mockResult = {\n        success: true,\n        tokens: {\n          accessToken: 'magic-token-123',\n        },\n        message: 'Magic link authentication successful',\n      };\n\n      mockOAuthCore.handleCallback.mockResolvedValue(mockResult as any);\n\n      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n\n      // Mock URL with magic link token\n      const mockUrl = 'myapp://oauth/callback?token=magic-token&flow=magic_link';\n      Object.defineProperty(window, 'location', {\n        value: { href: mockUrl },\n        writable: true,\n      });\n\n      await act(async () => {\n        await result.current.handleCallback();\n      });\n\n      expect(result.current.status).toBe('success');\n      expect(result.current.message).toBe('Magic link authentication successful');\n    });\n\n    it('should handle OAuth errors', async () => {\n      const mockResult = {\n        success: false,\n        error: 'access_denied',\n        message: 'User denied access',\n      };\n\n      mockOAuthCore.handleCallback.mockResolvedValue(mockResult as any);\n\n      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n\n      // Mock URL with error\n      const mockUrl = 'myapp://oauth/callback?error=access_denied&error_description=User%20denied%20access';\n      Object.defineProperty(window, 'location', {\n        value: { href: mockUrl },\n        writable: true,\n      });\n\n      await act(async () => {\n        await result.current.handleCallback();\n      });\n\n      expect(result.current.status).toBe('error');\n      expect(result.current.message).toBe('User denied access');\n    });\n\n    it('should handle network errors', async () => {\n      mockOAuthCore.handleCallback.mockRejectedValue(new Error('Network error'));\n\n      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n\n      const mockUrl = 'myapp://oauth/callback?code=auth-code-123';\n      Object.defineProperty(window, 'location', {\n        value: { href: mockUrl },\n        writable: true,\n      });\n\n      await act(async () => {\n        await result.current.handleCallback();\n      });\n\n      expect(result.current.status).toBe('error');\n      expect(result.current.message).toBe('Network error');\n    });\n\n    it('should handle unknown errors', async () => {\n      mockOAuthCore.handleCallback.mockRejectedValue('Unknown error');\n\n      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n\n      const mockUrl = 'myapp://oauth/callback?code=auth-code-123';\n      Object.defineProperty(window, 'location', {\n        value: { href: mockUrl },\n        writable: true,\n      });\n\n      await act(async () => {\n        await result.current.handleCallback();\n      });\n\n      expect(result.current.status).toBe('error');\n      expect(result.current.message).toBe('An unknown error occurred');\n    });\n\n    it('should handle empty URL parameters', async () => {\n      const mockResult = {\n        success: false,\n        error: 'invalid_request',\n        message: 'No valid parameters found',\n      };\n\n      mockOAuthCore.handleCallback.mockResolvedValue(mockResult as any);\n\n      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n\n      // Mock URL without parameters\n      const mockUrl = 'myapp://oauth/callback';\n      Object.defineProperty(window, 'location', {\n        value: { href: mockUrl },\n        writable: true,\n      });\n\n      await act(async () => {\n        await result.current.handleCallback();\n      });\n\n      expect(result.current.status).toBe('error');\n      expect(result.current.message).toBe('No valid parameters found');\n    });\n  });\n\n  describe('retry', () => {\n    it('should reset status to processing and allow retry', async () => {\n      mockOAuthCore.handleCallback.mockRejectedValue(new Error('Network error'));\n\n      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n\n      const mockUrl = 'myapp://oauth/callback?code=auth-code-123';\n      Object.defineProperty(window, 'location', {\n        value: { href: mockUrl },\n        writable: true,\n      });\n\n      // First attempt fails\n      await act(async () => {\n        await result.current.handleCallback();\n      });\n\n      expect(result.current.status).toBe('error');\n\n      // Retry\n      act(() => {\n        result.current.retry();\n      });\n\n      expect(result.current.status).toBe('processing');\n      expect(result.current.message).toBe('Processing OAuth callback...');\n\n      // Second attempt succeeds\n      const mockResult = {\n        success: true,\n        tokens: { accessToken: 'token-123' },\n        message: 'Success',\n      };\n      mockOAuthCore.handleCallback.mockResolvedValue(mockResult as any);\n\n      await act(async () => {\n        await result.current.handleCallback();\n      });\n\n      expect(result.current.status).toBe('success');\n      expect(result.current.message).toBe('Success');\n    });\n  });\n\n  describe('URL parsing', () => {\n    it('should correctly parse URL parameters', async () => {\n      const mockResult = {\n        success: true,\n        tokens: { accessToken: 'token-123' },\n        message: 'Success',\n      };\n\n      mockOAuthCore.handleCallback.mockResolvedValue(mockResult as any);\n\n      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n\n      const mockUrl = 'myapp://oauth/callback?code=test-code&state=test-state&custom_param=value';\n      Object.defineProperty(window, 'location', {\n        value: { href: mockUrl },\n        writable: true,\n      });\n\n      await act(async () => {\n        await result.current.handleCallback();\n      });\n\n      const urlParams = mockOAuthCore.handleCallback.mock.calls[0][0] as URLSearchParams;\n      expect(urlParams.get('code')).toBe('test-code');\n      expect(urlParams.get('state')).toBe('test-state');\n      expect(urlParams.get('custom_param')).toBe('value');\n    });\n\n    it('should handle URL encoded parameters', async () => {\n      const mockResult = {\n        success: true,\n        tokens: { accessToken: 'token-123' },\n        message: 'Success',\n      };\n\n      mockOAuthCore.handleCallback.mockResolvedValue(mockResult as any);\n\n      const { result } = renderHook(() => useOAuthCallback(mockConfig));\n\n      const mockUrl = 'myapp://oauth/callback?error_description=User%20denied%20access&state=test%2Bstate';\n      Object.defineProperty(window, 'location', {\n        value: { href: mockUrl },\n        writable: true,\n      });\n\n      await act(async () => {\n        await result.current.handleCallback();\n      });\n\n      const urlParams = mockOAuthCore.handleCallback.mock.calls[0][0] as URLSearchParams;\n      expect(urlParams.get('error_description')).toBe('User denied access');\n      expect(urlParams.get('state')).toBe('test+state');\n    });\n  });\n});\n"
        }
    ]
}