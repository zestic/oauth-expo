{
    "sourceFile": "src/__tests__/setup.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1752841455579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752841498464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,20 +8,31 @@\n   removeItem: jest.fn(() => Promise.resolve()),\n   multiRemove: jest.fn(() => Promise.resolve()),\n }));\n \n-// Mock expo-crypto\n-jest.mock('expo-crypto', () => ({\n-  randomUUID: jest.fn(() => 'mock-uuid-123'),\n-  digestStringAsync: jest.fn(() => Promise.resolve('mock-hash=')),\n-  CryptoDigestAlgorithm: {\n-    SHA256: 'SHA256',\n-  },\n-  CryptoEncoding: {\n-    BASE64: 'BASE64',\n-  },\n-}));\n+// Mock expo-crypto with more realistic values\n+jest.mock('expo-crypto', () => {\n+  let uuidCounter = 0;\n+  let hashCounter = 0;\n \n+  return {\n+    randomUUID: jest.fn(() => {\n+      uuidCounter++;\n+      return `550e8400-e29b-41d4-a716-44665544000${uuidCounter}`;\n+    }),\n+    digestStringAsync: jest.fn(() => {\n+      hashCounter++;\n+      return Promise.resolve(`dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjX${hashCounter}=`);\n+    }),\n+    CryptoDigestAlgorithm: {\n+      SHA256: 'SHA256',\n+    },\n+    CryptoEncoding: {\n+      BASE64: 'BASE64',\n+    },\n+  };\n+});\n+\n // Mock fetch globally\n global.fetch = jest.fn(() =>\n   Promise.resolve({\n     ok: true,\n"
                },
                {
                    "date": 1752853203433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,15 @@\n   removeItem: jest.fn(() => Promise.resolve()),\n   multiRemove: jest.fn(() => Promise.resolve()),\n }));\n \n+// Mock expo-modules-core\n+jest.mock('expo-modules-core', () => ({\n+  NativeModulesProxy: {},\n+  EventEmitter: jest.fn(),\n+  requireNativeModule: jest.fn(),\n+}));\n+\n // Mock expo-crypto with more realistic values\n jest.mock('expo-crypto', () => {\n   let uuidCounter = 0;\n   let hashCounter = 0;\n@@ -31,8 +38,23 @@\n     },\n   };\n });\n \n+// Mock expo-auth-session\n+jest.mock('expo-auth-session', () => ({\n+  makeRedirectUri: jest.fn(() => 'myapp://oauth/callback'),\n+  AuthRequest: jest.fn(),\n+  AuthSession: {\n+    AuthRequestConfig: {},\n+  },\n+}));\n+\n+// Mock expo-web-browser\n+jest.mock('expo-web-browser', () => ({\n+  openBrowserAsync: jest.fn(),\n+  dismissBrowser: jest.fn(),\n+}));\n+\n // Mock fetch globally\n global.fetch = jest.fn(() =>\n   Promise.resolve({\n     ok: true,\n"
                },
                {
                    "date": 1752908100544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,30 @@\n // Setup for React Native Testing Library\n // Note: @testing-library/react-native v12.4+ includes built-in Jest matchers\n \n-// Mock AsyncStorage\n+// Mock AsyncStorage with stateful storage for integration tests\n+const mockStorage: Record<string, string> = {};\n+\n jest.mock('@react-native-async-storage/async-storage', () => ({\n-  setItem: jest.fn(() => Promise.resolve()),\n-  getItem: jest.fn(() => Promise.resolve(null)),\n-  removeItem: jest.fn(() => Promise.resolve()),\n-  multiRemove: jest.fn(() => Promise.resolve()),\n+  setItem: jest.fn((key: string, value: string) => {\n+    mockStorage[key] = value;\n+    return Promise.resolve();\n+  }),\n+  getItem: jest.fn((key: string) => {\n+    return Promise.resolve(mockStorage[key] || null);\n+  }),\n+  removeItem: jest.fn((key: string) => {\n+    delete mockStorage[key];\n+    return Promise.resolve();\n+  }),\n+  multiRemove: jest.fn((keys: string[]) => {\n+    keys.forEach(key => delete mockStorage[key]);\n+    return Promise.resolve();\n+  }),\n+  clear: jest.fn(() => {\n+    Object.keys(mockStorage).forEach(key => delete mockStorage[key]);\n+    return Promise.resolve();\n+  }),\n }));\n \n // Mock expo-modules-core\n jest.mock('expo-modules-core', () => ({\n"
                },
                {
                    "date": 1752908114843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,13 @@\n     return Promise.resolve();\n   }),\n }));\n \n+// Export a function to clear mock storage for tests\n+(global as any).clearMockStorage = () => {\n+  Object.keys(mockStorage).forEach(key => delete mockStorage[key]);\n+};\n+\n // Mock expo-modules-core\n jest.mock('expo-modules-core', () => ({\n   NativeModulesProxy: {},\n   EventEmitter: jest.fn(),\n"
                },
                {
                    "date": 1753000923869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n jest.mock('expo-crypto', () => {\n   let uuidCounter = 0;\n   let hashCounter = 0;\n \n-  return {\n+  const mockCrypto = {\n     randomUUID: jest.fn(() => {\n       uuidCounter++;\n       return `550e8400-e29b-41d4-a716-44665544000${uuidCounter}`;\n     }),\n"
                },
                {
                    "date": 1753000941729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,16 @@\n     CryptoEncoding: {\n       BASE64: 'BASE64',\n     },\n   };\n+\n+  // Add reset function to the mock\n+  mockCrypto.resetCounters = () => {\n+    uuidCounter = 0;\n+    hashCounter = 0;\n+  };\n+\n+  return mockCrypto;\n });\n \n // Mock expo-auth-session\n jest.mock('expo-auth-session', () => ({\n"
                },
                {
                    "date": 1753000956136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,13 +25,20 @@\n     return Promise.resolve();\n   }),\n }));\n \n-// Export a function to clear mock storage for tests\n+// Export functions to reset mock state for tests\n (global as any).clearMockStorage = () => {\n   Object.keys(mockStorage).forEach(key => delete mockStorage[key]);\n };\n \n+(global as any).resetMockCrypto = () => {\n+  const mockCrypto = require('expo-crypto');\n+  if (mockCrypto.resetCounters) {\n+    mockCrypto.resetCounters();\n+  }\n+};\n+\n // Mock expo-modules-core\n jest.mock('expo-modules-core', () => ({\n   NativeModulesProxy: {},\n   EventEmitter: jest.fn(),\n"
                },
                {
                    "date": 1753001005763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,20 @@\n     mockCrypto.resetCounters();\n   }\n };\n \n+// Global cleanup before each test to prevent interference\n+beforeEach(() => {\n+  // Clear storage state\n+  (global as any).clearMockStorage?.();\n+\n+  // Reset crypto counters for consistent UUIDs\n+  (global as any).resetMockCrypto?.();\n+\n+  // Clear all mocks\n+  jest.clearAllMocks();\n+});\n+\n // Mock expo-modules-core\n jest.mock('expo-modules-core', () => ({\n   NativeModulesProxy: {},\n   EventEmitter: jest.fn(),\n"
                },
                {
                    "date": 1753001040429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,12 +39,9 @@\n };\n \n // Global cleanup before each test to prevent interference\n beforeEach(() => {\n-  // Clear storage state\n-  (global as any).clearMockStorage?.();\n-\n-  // Reset crypto counters for consistent UUIDs\n+  // Reset crypto counters for consistent UUIDs (but don't clear storage here)\n   (global as any).resetMockCrypto?.();\n \n   // Clear all mocks\n   jest.clearAllMocks();\n"
                },
                {
                    "date": 1753001114084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,10 @@\n beforeEach(() => {\n   // Reset crypto counters for consistent UUIDs (but don't clear storage here)\n   (global as any).resetMockCrypto?.();\n \n-  // Clear all mocks\n-  jest.clearAllMocks();\n+  // Don't clear all mocks globally as it interferes with storage state\n+  // Individual tests should clear their own mocks if needed\n });\n \n // Mock expo-modules-core\n jest.mock('expo-modules-core', () => ({\n"
                },
                {
                    "date": 1753008656407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,36 @@\n // Setup for React Native Testing Library\n // Note: @testing-library/react-native v12.4+ includes built-in Jest matchers\n \n-// Mock AsyncStorage with stateful storage for integration tests\n-const mockStorage: Record<string, string> = {};\n+// Mock AsyncStorage with isolated storage for each test\n+let mockStorage: Record<string, string> = {};\n \n+// Create a new storage instance for complete isolation\n+const createIsolatedStorage = () => {\n+  const isolatedStorage: Record<string, string> = {};\n+  return {\n+    setItem: jest.fn((key: string, value: string) => {\n+      isolatedStorage[key] = value;\n+      return Promise.resolve();\n+    }),\n+    getItem: jest.fn((key: string) => {\n+      return Promise.resolve(isolatedStorage[key] || null);\n+    }),\n+    removeItem: jest.fn((key: string) => {\n+      delete isolatedStorage[key];\n+      return Promise.resolve();\n+    }),\n+    multiRemove: jest.fn((keys: string[]) => {\n+      keys.forEach(key => delete isolatedStorage[key]);\n+      return Promise.resolve();\n+    }),\n+    clear: jest.fn(() => {\n+      Object.keys(isolatedStorage).forEach(key => delete isolatedStorage[key]);\n+      return Promise.resolve();\n+    }),\n+  };\n+};\n+\n jest.mock('@react-native-async-storage/async-storage', () => ({\n   setItem: jest.fn((key: string, value: string) => {\n     mockStorage[key] = value;\n     return Promise.resolve();\n"
                },
                {
                    "date": 1753008671117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,10 @@\n (global as any).clearMockStorage = () => {\n   Object.keys(mockStorage).forEach(key => delete mockStorage[key]);\n };\n \n+(global as any).createIsolatedStorage = createIsolatedStorage;\n+\n (global as any).resetMockCrypto = () => {\n   const mockCrypto = require('expo-crypto');\n   if (mockCrypto.resetCounters) {\n     mockCrypto.resetCounters();\n"
                },
                {
                    "date": 1753028139121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,13 +19,15 @@\n       delete isolatedStorage[key];\n       return Promise.resolve();\n     }),\n     multiRemove: jest.fn((keys: string[]) => {\n-      keys.forEach(key => delete isolatedStorage[key]);\n+      keys.forEach((key) => delete isolatedStorage[key]);\n       return Promise.resolve();\n     }),\n     clear: jest.fn(() => {\n-      Object.keys(isolatedStorage).forEach(key => delete isolatedStorage[key]);\n+      Object.keys(isolatedStorage).forEach(\n+        (key) => delete isolatedStorage[key]\n+      );\n       return Promise.resolve();\n     }),\n   };\n };\n@@ -42,20 +44,20 @@\n     delete mockStorage[key];\n     return Promise.resolve();\n   }),\n   multiRemove: jest.fn((keys: string[]) => {\n-    keys.forEach(key => delete mockStorage[key]);\n+    keys.forEach((key) => delete mockStorage[key]);\n     return Promise.resolve();\n   }),\n   clear: jest.fn(() => {\n-    Object.keys(mockStorage).forEach(key => delete mockStorage[key]);\n+    Object.keys(mockStorage).forEach((key) => delete mockStorage[key]);\n     return Promise.resolve();\n   }),\n }));\n \n // Export functions to reset mock state for tests\n (global as any).clearMockStorage = () => {\n-  Object.keys(mockStorage).forEach(key => delete mockStorage[key]);\n+  Object.keys(mockStorage).forEach((key) => delete mockStorage[key]);\n };\n \n (global as any).createIsolatedStorage = createIsolatedStorage;\n \n@@ -93,9 +95,11 @@\n       return `550e8400-e29b-41d4-a716-44665544000${uuidCounter}`;\n     }),\n     digestStringAsync: jest.fn(() => {\n       hashCounter++;\n-      return Promise.resolve(`dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjX${hashCounter}=`);\n+      return Promise.resolve(\n+        `dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjX${hashCounter}=`\n+      );\n     }),\n     CryptoDigestAlgorithm: {\n       SHA256: 'SHA256',\n     },\n@@ -104,9 +108,9 @@\n     },\n   };\n \n   // Add reset function to the mock\n-  mockCrypto.resetCounters = () => {\n+  (mockCrypto as any).resetCounters = () => {\n     uuidCounter = 0;\n     hashCounter = 0;\n   };\n \n"
                }
            ],
            "date": 1752841455579,
            "name": "Commit-0",
            "content": "// Setup for React Native Testing Library\n// Note: @testing-library/react-native v12.4+ includes built-in Jest matchers\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () => ({\n  setItem: jest.fn(() => Promise.resolve()),\n  getItem: jest.fn(() => Promise.resolve(null)),\n  removeItem: jest.fn(() => Promise.resolve()),\n  multiRemove: jest.fn(() => Promise.resolve()),\n}));\n\n// Mock expo-crypto\njest.mock('expo-crypto', () => ({\n  randomUUID: jest.fn(() => 'mock-uuid-123'),\n  digestStringAsync: jest.fn(() => Promise.resolve('mock-hash=')),\n  CryptoDigestAlgorithm: {\n    SHA256: 'SHA256',\n  },\n  CryptoEncoding: {\n    BASE64: 'BASE64',\n  },\n}));\n\n// Mock fetch globally\nglobal.fetch = jest.fn(() =>\n  Promise.resolve({\n    ok: true,\n    status: 200,\n    headers: new Map([['content-type', 'application/json']]),\n    json: () => Promise.resolve({}),\n    text: () => Promise.resolve(''),\n  })\n) as jest.Mock;\n\n// Mock console methods to reduce noise in tests\nconst originalError = console.error;\nconst originalWarn = console.warn;\n\nbeforeAll(() => {\n  console.error = (...args: any[]) => {\n    if (\n      typeof args[0] === 'string' &&\n      args[0].includes('Warning: ReactDOM.render is no longer supported')\n    ) {\n      return;\n    }\n    originalError.call(console, ...args);\n  };\n\n  console.warn = (...args: any[]) => {\n    if (\n      typeof args[0] === 'string' &&\n      (args[0].includes('componentWillReceiveProps') ||\n        args[0].includes('componentWillUpdate'))\n    ) {\n      return;\n    }\n    originalWarn.call(console, ...args);\n  };\n});\n\nafterAll(() => {\n  console.error = originalError;\n  console.warn = originalWarn;\n});\n\n// Clean up after each test\nafterEach(() => {\n  jest.clearAllMocks();\n});\n"
        }
    ]
}