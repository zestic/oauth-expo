{
    "sourceFile": "src/__tests__/adapters/ExpoStorageAdapter.test.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1752999640083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752999651370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,10 +131,11 @@\n       await adapter.storeTokens({\n         accessToken: 'access-token-123',\n       });\n \n-      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('oauth_access_token', 'access-token-123');\n-      expect(mockAsyncStorage.setItem).toHaveBeenCalledTimes(1);\n+      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('access_token', 'access-token-123');\n+      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('token_type', 'Bearer');\n+      expect(mockAsyncStorage.setItem).toHaveBeenCalledTimes(2);\n     });\n \n     it('should store access and refresh tokens', async () => {\n       mockAsyncStorage.setItem.mockResolvedValue();\n"
                },
                {
                    "date": 1752999662950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,11 +144,12 @@\n         accessToken: 'access-token-123',\n         refreshToken: 'refresh-token-456',\n       });\n \n-      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('oauth_access_token', 'access-token-123');\n-      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('oauth_refresh_token', 'refresh-token-456');\n-      expect(mockAsyncStorage.setItem).toHaveBeenCalledTimes(2);\n+      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('access_token', 'access-token-123');\n+      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('refresh_token', 'refresh-token-456');\n+      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('token_type', 'Bearer');\n+      expect(mockAsyncStorage.setItem).toHaveBeenCalledTimes(3);\n     });\n \n     it('should store tokens with expiration', async () => {\n       mockAsyncStorage.setItem.mockResolvedValue();\n"
                },
                {
                    "date": 1752999675336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,12 +163,13 @@\n       });\n \n       const expectedExpiresAt = mockDate.getTime() + (3600 * 1000);\n \n-      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('oauth_access_token', 'access-token-123');\n-      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('oauth_refresh_token', 'refresh-token-456');\n-      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('oauth_expires_at', expectedExpiresAt.toString());\n-      expect(mockAsyncStorage.setItem).toHaveBeenCalledTimes(3);\n+      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('access_token', 'access-token-123');\n+      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('refresh_token', 'refresh-token-456');\n+      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('token_expiry', expectedExpiresAt.toString());\n+      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('token_type', 'Bearer');\n+      expect(mockAsyncStorage.setItem).toHaveBeenCalledTimes(4);\n     });\n   });\n \n   describe('getTokens', () => {\n"
                },
                {
                    "date": 1752999695045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,16 +176,18 @@\n     it('should retrieve all tokens', async () => {\n       mockAsyncStorage.getItem\n         .mockResolvedValueOnce('access-token-123')\n         .mockResolvedValueOnce('refresh-token-456')\n-        .mockResolvedValueOnce('1704067200000'); // 2024-01-01T00:00:00Z\n+        .mockResolvedValueOnce('1704067200000') // 2024-01-01T00:00:00Z\n+        .mockResolvedValueOnce('Bearer');\n \n       const result = await adapter.getTokens();\n \n       expect(result).toEqual({\n         accessToken: 'access-token-123',\n         refreshToken: 'refresh-token-456',\n         expiresAt: 1704067200000,\n+        tokenType: 'Bearer',\n       });\n     });\n \n     it('should handle missing tokens', async () => {\n"
                },
                {
                    "date": 1752999712262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,16 +193,18 @@\n     it('should handle missing tokens', async () => {\n       mockAsyncStorage.getItem\n         .mockResolvedValueOnce(null)\n         .mockResolvedValueOnce(null)\n+        .mockResolvedValueOnce(null)\n         .mockResolvedValueOnce(null);\n \n       const result = await adapter.getTokens();\n \n       expect(result).toEqual({\n         accessToken: null,\n         refreshToken: null,\n         expiresAt: null,\n+        tokenType: undefined,\n       });\n     });\n   });\n \n"
                }
            ],
            "date": 1752999640083,
            "name": "Commit-0",
            "content": "import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { ExpoStorageAdapter } from '../../adapters/ExpoStorageAdapter';\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () => ({\n  setItem: jest.fn(),\n  getItem: jest.fn(),\n  removeItem: jest.fn(),\n  multiRemove: jest.fn(),\n}));\n\nconst mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;\n\ndescribe('ExpoStorageAdapter', () => {\n  let adapter: ExpoStorageAdapter;\n\n  beforeEach(() => {\n    adapter = new ExpoStorageAdapter();\n    jest.clearAllMocks();\n  });\n\n  describe('setItem', () => {\n    it('should store item successfully', async () => {\n      mockAsyncStorage.setItem.mockResolvedValue();\n\n      await adapter.setItem('test-key', 'test-value');\n\n      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('test-key', 'test-value');\n    });\n\n    it('should throw error when storage fails', async () => {\n      const error = new Error('Storage error');\n      mockAsyncStorage.setItem.mockRejectedValue(error);\n\n      await expect(adapter.setItem('test-key', 'test-value')).rejects.toThrow(\n        'Failed to store item with key \"test-key\": Error: Storage error'\n      );\n    });\n  });\n\n  describe('getItem', () => {\n    it('should retrieve item successfully', async () => {\n      mockAsyncStorage.getItem.mockResolvedValue('test-value');\n\n      const result = await adapter.getItem('test-key');\n\n      expect(result).toBe('test-value');\n      expect(mockAsyncStorage.getItem).toHaveBeenCalledWith('test-key');\n    });\n\n    it('should return null when item does not exist', async () => {\n      mockAsyncStorage.getItem.mockResolvedValue(null);\n\n      const result = await adapter.getItem('non-existent-key');\n\n      expect(result).toBeNull();\n    });\n\n    it('should throw error when retrieval fails', async () => {\n      const error = new Error('Retrieval error');\n      mockAsyncStorage.getItem.mockRejectedValue(error);\n\n      await expect(adapter.getItem('test-key')).rejects.toThrow(\n        'Failed to retrieve item with key \"test-key\": Error: Retrieval error'\n      );\n    });\n  });\n\n  describe('removeItem', () => {\n    it('should remove item successfully', async () => {\n      mockAsyncStorage.removeItem.mockResolvedValue();\n\n      await adapter.removeItem('test-key');\n\n      expect(mockAsyncStorage.removeItem).toHaveBeenCalledWith('test-key');\n    });\n\n    it('should throw error when removal fails', async () => {\n      const error = new Error('Removal error');\n      mockAsyncStorage.removeItem.mockRejectedValue(error);\n\n      await expect(adapter.removeItem('test-key')).rejects.toThrow(\n        'Failed to remove item with key \"test-key\": Error: Removal error'\n      );\n    });\n  });\n\n  describe('removeItems', () => {\n    it('should remove multiple items successfully', async () => {\n      mockAsyncStorage.multiRemove.mockResolvedValue();\n\n      await adapter.removeItems(['key1', 'key2', 'key3']);\n\n      expect(mockAsyncStorage.multiRemove).toHaveBeenCalledWith(['key1', 'key2', 'key3']);\n    });\n\n    it('should throw error when multi-removal fails', async () => {\n      const error = new Error('Multi-removal error');\n      mockAsyncStorage.multiRemove.mockRejectedValue(error);\n\n      await expect(adapter.removeItems(['key1', 'key2'])).rejects.toThrow(\n        'Failed to remove items with keys \"key1, key2\": Error: Multi-removal error'\n      );\n    });\n  });\n\n  describe('clearOAuthStorage', () => {\n    it('should clear all OAuth-related storage', async () => {\n      mockAsyncStorage.multiRemove.mockResolvedValue();\n\n      await adapter.clearOAuthStorage();\n\n      expect(mockAsyncStorage.multiRemove).toHaveBeenCalledWith([\n        'access_token',\n        'refresh_token',\n        'token_expiry',\n        'token_type',\n        'oauth_state',\n        'oauth_state_expiry',\n        'pkce_code_verifier',\n        'pkce_code_challenge',\n        'pkce_code_challenge_method',\n      ]);\n    });\n  });\n\n  describe('storeTokens', () => {\n    it('should store access token only', async () => {\n      mockAsyncStorage.setItem.mockResolvedValue();\n\n      await adapter.storeTokens({\n        accessToken: 'access-token-123',\n      });\n\n      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('oauth_access_token', 'access-token-123');\n      expect(mockAsyncStorage.setItem).toHaveBeenCalledTimes(1);\n    });\n\n    it('should store access and refresh tokens', async () => {\n      mockAsyncStorage.setItem.mockResolvedValue();\n\n      await adapter.storeTokens({\n        accessToken: 'access-token-123',\n        refreshToken: 'refresh-token-456',\n      });\n\n      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('oauth_access_token', 'access-token-123');\n      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('oauth_refresh_token', 'refresh-token-456');\n      expect(mockAsyncStorage.setItem).toHaveBeenCalledTimes(2);\n    });\n\n    it('should store tokens with expiration', async () => {\n      mockAsyncStorage.setItem.mockResolvedValue();\n      const mockDate = new Date('2024-01-01T00:00:00Z');\n      jest.spyOn(Date, 'now').mockReturnValue(mockDate.getTime());\n\n      await adapter.storeTokens({\n        accessToken: 'access-token-123',\n        refreshToken: 'refresh-token-456',\n        expiresIn: 3600, // 1 hour\n      });\n\n      const expectedExpiresAt = mockDate.getTime() + (3600 * 1000);\n\n      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('oauth_access_token', 'access-token-123');\n      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('oauth_refresh_token', 'refresh-token-456');\n      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('oauth_expires_at', expectedExpiresAt.toString());\n      expect(mockAsyncStorage.setItem).toHaveBeenCalledTimes(3);\n    });\n  });\n\n  describe('getTokens', () => {\n    it('should retrieve all tokens', async () => {\n      mockAsyncStorage.getItem\n        .mockResolvedValueOnce('access-token-123')\n        .mockResolvedValueOnce('refresh-token-456')\n        .mockResolvedValueOnce('1704067200000'); // 2024-01-01T00:00:00Z\n\n      const result = await adapter.getTokens();\n\n      expect(result).toEqual({\n        accessToken: 'access-token-123',\n        refreshToken: 'refresh-token-456',\n        expiresAt: 1704067200000,\n      });\n    });\n\n    it('should handle missing tokens', async () => {\n      mockAsyncStorage.getItem\n        .mockResolvedValueOnce(null)\n        .mockResolvedValueOnce(null)\n        .mockResolvedValueOnce(null);\n\n      const result = await adapter.getTokens();\n\n      expect(result).toEqual({\n        accessToken: null,\n        refreshToken: null,\n        expiresAt: null,\n      });\n    });\n  });\n\n  describe('isTokenExpired', () => {\n    it('should return true when no expiration time is stored', async () => {\n      mockAsyncStorage.getItem.mockResolvedValue(null);\n\n      const result = await adapter.isTokenExpired();\n\n      expect(result).toBe(true);\n    });\n\n    it('should return true when token is expired', async () => {\n      const pastTime = Date.now() - 1000; // 1 second ago\n      mockAsyncStorage.getItem.mockResolvedValue(pastTime.toString());\n\n      const result = await adapter.isTokenExpired();\n\n      expect(result).toBe(true);\n    });\n\n    it('should return false when token is not expired', async () => {\n      const futureTime = Date.now() + 3600000; // 1 hour from now\n      mockAsyncStorage.getItem.mockResolvedValue(futureTime.toString());\n\n      const result = await adapter.isTokenExpired();\n\n      expect(result).toBe(false);\n    });\n  });\n});\n"
        }
    ]
}