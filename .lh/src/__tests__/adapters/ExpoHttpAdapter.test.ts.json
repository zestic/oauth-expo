{
    "sourceFile": "src/__tests__/adapters/ExpoHttpAdapter.test.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1753027355846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753027374819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n         headers: new Map([['content-type', 'application/json']]),\n         json: jest.fn().mockResolvedValue({ access_token: 'token123' }),\n       };\n       mockResponse.headers.forEach = jest.fn((callback) => {\n-        callback('application/json', 'content-type');\n+        callback('application/json', 'content-type', mockResponse.headers);\n       });\n       mockFetch.mockResolvedValue(mockResponse as any);\n \n       const result = await adapter.post(\n"
                },
                {
                    "date": 1753027387013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n         headers: new Map([['content-type', 'text/plain']]),\n         text: jest.fn().mockResolvedValue('Success'),\n       };\n       mockResponse.headers.forEach = jest.fn((callback) => {\n-        callback('text/plain', 'content-type');\n+        callback('text/plain', 'content-type', mockResponse.headers);\n       });\n       mockFetch.mockResolvedValue(mockResponse as any);\n \n       const result = await adapter.post('https://api.example.com/webhook', {\n"
                },
                {
                    "date": 1753027399770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n         headers: new Map([['content-type', 'application/json']]),\n         json: jest.fn().mockResolvedValue({ id: 123 }),\n       };\n       mockResponse.headers.forEach = jest.fn((callback) => {\n-        callback('application/json', 'content-type');\n+        callback('application/json', 'content-type', mockResponse.headers);\n       });\n       mockFetch.mockResolvedValue(mockResponse as any);\n \n       await adapter.post(\n"
                },
                {
                    "date": 1753027411412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n         headers: new Map([['content-type', 'application/json']]),\n         json: jest.fn().mockResolvedValue({ success: true }),\n       };\n       mockResponse.headers.forEach = jest.fn((callback) => {\n-        callback('application/json', 'content-type');\n+        callback('application/json', 'content-type', mockResponse.headers);\n       });\n       mockFetch.mockResolvedValue(mockResponse as any);\n \n       await adapter.post(\n"
                },
                {
                    "date": 1753027422730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,9 +190,9 @@\n         headers: new Map([['content-type', 'application/json']]),\n         json: jest.fn().mockResolvedValue({ data: 'test' }),\n       };\n       mockResponse.headers.forEach = jest.fn((callback) => {\n-        callback('application/json', 'content-type');\n+        callback('application/json', 'content-type', mockResponse.headers);\n       });\n       mockFetch.mockResolvedValue(mockResponse as any);\n \n       const result = await adapter.get('https://api.example.com/user');\n"
                },
                {
                    "date": 1753027433771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,9 +218,9 @@\n         headers: new Map([['content-type', 'application/json']]),\n         json: jest.fn().mockResolvedValue({ user: 'john' }),\n       };\n       mockResponse.headers.forEach = jest.fn((callback) => {\n-        callback('application/json', 'content-type');\n+        callback('application/json', 'content-type', mockResponse.headers);\n       });\n       mockFetch.mockResolvedValue(mockResponse as any);\n \n       await adapter.get('https://api.example.com/user', {\n"
                }
            ],
            "date": 1753027355846,
            "name": "Commit-0",
            "content": "import { ExpoHttpAdapter } from '../../adapters/ExpoHttpAdapter';\n\n// Mock fetch\nglobal.fetch = jest.fn();\nconst mockFetch = fetch as jest.MockedFunction<typeof fetch>;\n\ndescribe('ExpoHttpAdapter', () => {\n  let adapter: ExpoHttpAdapter;\n\n  beforeEach(() => {\n    adapter = new ExpoHttpAdapter();\n    jest.clearAllMocks();\n  });\n\n  describe('post', () => {\n    it('should make POST request with JSON data', async () => {\n      const mockResponse = {\n        status: 200,\n        headers: new Map([['content-type', 'application/json']]),\n        json: jest.fn().mockResolvedValue({ success: true }),\n      };\n      mockResponse.headers.forEach = jest.fn((callback) => {\n        callback('application/json', 'content-type', mockResponse.headers);\n      });\n      mockFetch.mockResolvedValue(mockResponse as any);\n\n      const result = await adapter.post('https://api.example.com/token', {\n        grant_type: 'authorization_code',\n        code: 'test-code',\n      });\n\n      expect(mockFetch).toHaveBeenCalledWith('https://api.example.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },\n        body: JSON.stringify({\n          grant_type: 'authorization_code',\n          code: 'test-code',\n        }),\n      });\n\n      expect(result).toEqual({\n        status: 200,\n        data: { success: true },\n        headers: { 'content-type': 'application/json' },\n      });\n    });\n\n    it('should make POST request with form data', async () => {\n      const mockResponse = {\n        status: 200,\n        headers: new Map([['content-type', 'application/json']]),\n        json: jest.fn().mockResolvedValue({ access_token: 'token123' }),\n      };\n      mockResponse.headers.forEach = jest.fn((callback) => {\n        callback('application/json', 'content-type');\n      });\n      mockFetch.mockResolvedValue(mockResponse as any);\n\n      const result = await adapter.post(\n        'https://api.example.com/token',\n        {\n          grant_type: 'authorization_code',\n          code: 'test-code',\n        },\n        {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        }\n      );\n\n      expect(mockFetch).toHaveBeenCalledWith('https://api.example.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Accept': 'application/json',\n        },\n        body: 'grant_type=authorization_code&code=test-code',\n      });\n\n      expect(result).toEqual({\n        status: 200,\n        data: { access_token: 'token123' },\n        headers: { 'content-type': 'application/json' },\n      });\n    });\n\n    it('should handle text response', async () => {\n      const mockResponse = {\n        status: 200,\n        headers: new Map([['content-type', 'text/plain']]),\n        text: jest.fn().mockResolvedValue('Success'),\n      };\n      mockResponse.headers.forEach = jest.fn((callback) => {\n        callback('text/plain', 'content-type');\n      });\n      mockFetch.mockResolvedValue(mockResponse as any);\n\n      const result = await adapter.post('https://api.example.com/webhook', {\n        message: 'test',\n      });\n\n      expect(result).toEqual({\n        status: 200,\n        data: 'Success',\n        headers: { 'content-type': 'text/plain' },\n      });\n    });\n\n    it('should handle custom headers', async () => {\n      const mockResponse = {\n        status: 201,\n        headers: new Map([['content-type', 'application/json']]),\n        json: jest.fn().mockResolvedValue({ id: 123 }),\n      };\n      mockResponse.headers.forEach = jest.fn((callback) => {\n        callback('application/json', 'content-type');\n      });\n      mockFetch.mockResolvedValue(mockResponse as any);\n\n      await adapter.post(\n        'https://api.example.com/data',\n        { name: 'test' },\n        {\n          'Authorization': 'Bearer token123',\n          'X-Custom-Header': 'custom-value',\n        }\n      );\n\n      expect(mockFetch).toHaveBeenCalledWith('https://api.example.com/data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': 'Bearer token123',\n          'X-Custom-Header': 'custom-value',\n        },\n        body: JSON.stringify({ name: 'test' }),\n      });\n    });\n\n    it('should handle network errors', async () => {\n      mockFetch.mockRejectedValue(new Error('Network error'));\n\n      await expect(\n        adapter.post('https://api.example.com/token', { test: 'data' })\n      ).rejects.toThrow('Network request failed: Error: Network error');\n    });\n\n    it('should handle null and undefined values in form data', async () => {\n      const mockResponse = {\n        status: 200,\n        headers: new Map([['content-type', 'application/json']]),\n        json: jest.fn().mockResolvedValue({ success: true }),\n      };\n      mockResponse.headers.forEach = jest.fn((callback) => {\n        callback('application/json', 'content-type');\n      });\n      mockFetch.mockResolvedValue(mockResponse as any);\n\n      await adapter.post(\n        'https://api.example.com/token',\n        {\n          grant_type: 'authorization_code',\n          code: 'test-code',\n          state: null,\n          redirect_uri: undefined,\n        },\n        {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        }\n      );\n\n      expect(mockFetch).toHaveBeenCalledWith('https://api.example.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Accept': 'application/json',\n        },\n        body: 'grant_type=authorization_code&code=test-code',\n      });\n    });\n  });\n\n  describe('get', () => {\n    it('should make GET request successfully', async () => {\n      const mockResponse = {\n        status: 200,\n        headers: new Map([['content-type', 'application/json']]),\n        json: jest.fn().mockResolvedValue({ data: 'test' }),\n      };\n      mockResponse.headers.forEach = jest.fn((callback) => {\n        callback('application/json', 'content-type');\n      });\n      mockFetch.mockResolvedValue(mockResponse as any);\n\n      const result = await adapter.get('https://api.example.com/user');\n\n      expect(mockFetch).toHaveBeenCalledWith('https://api.example.com/user', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },\n      });\n\n      expect(result).toEqual({\n        status: 200,\n        data: { data: 'test' },\n        headers: { 'content-type': 'application/json' },\n      });\n    });\n\n    it('should make GET request with custom headers', async () => {\n      const mockResponse = {\n        status: 200,\n        headers: new Map([['content-type', 'application/json']]),\n        json: jest.fn().mockResolvedValue({ user: 'john' }),\n      };\n      mockResponse.headers.forEach = jest.fn((callback) => {\n        callback('application/json', 'content-type');\n      });\n      mockFetch.mockResolvedValue(mockResponse as any);\n\n      await adapter.get('https://api.example.com/user', {\n        Authorization: 'Bearer token123',\n        Accept: 'application/vnd.api+json',\n      });\n\n      expect(mockFetch).toHaveBeenCalledWith('https://api.example.com/user', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/vnd.api+json',\n          'Authorization': 'Bearer token123',\n        },\n      });\n    });\n\n    it('should handle GET request errors', async () => {\n      mockFetch.mockRejectedValue(new Error('Request failed'));\n\n      await expect(adapter.get('https://api.example.com/user')).rejects.toThrow(\n        'Network request failed: Error: Request failed'\n      );\n    });\n  });\n});\n"
        }
    ]
}