{
    "sourceFile": "src/hooks/useOAuthConfig.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1752840324219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752840594455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n         const pkceAdapter = new ExpoPKCEAdapter();\n \n         // Generate PKCE parameters\n         const pkceChallenge = await pkceAdapter.generateCodeChallenge();\n-        const state = pkceAdapter.generateState();\n+        const state = await pkceAdapter.generateState();\n \n         // Build authorization URL manually\n         const params = new URLSearchParams({\n           response_type: 'code',\n"
                },
                {
                    "date": 1752903004980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,25 +7,37 @@\n  */\n export interface UseOAuthConfigOptions {\n   /** OAuth client ID */\n   clientId: string;\n-  /** Base URL for OAuth endpoints */\n-  baseUrl: string;\n+  /** Authorization endpoint URL */\n+  authorizationEndpoint: string;\n+  /** Token endpoint URL */\n+  tokenEndpoint: string;\n+  /** Redirect URI */\n+  redirectUri: string;\n   /** OAuth scopes to request */\n   scopes?: string[];\n   /** Custom redirect URI scheme */\n   scheme?: string;\n   /** Custom redirect URI path */\n   path?: string;\n-  /** Additional OAuth endpoints (if different from standard) */\n-  endpoints?: {\n-    authorization?: string;\n-    token?: string;\n-    revocation?: string;\n-  };\n+  /** Additional OAuth endpoints */\n+  revocationEndpoint?: string;\n }\n \n /**\n+ * Result of useOAuthConfig hook\n+ */\n+export interface UseOAuthConfigResult {\n+  config: ExpoOAuthConfig;\n+  generateAuthUrl: () => Promise<{\n+    authUrl: string;\n+    codeVerifier: string;\n+    state: string;\n+  }>;\n+}\n+\n+/**\n  * React hook for creating OAuth configuration\n  * Generates Expo-compatible OAuth configuration with proper redirect URIs\n  */\n export function useOAuthConfig(options: UseOAuthConfigOptions): ExpoOAuthConfig {\n"
                },
                {
                    "date": 1752903022654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,41 +39,67 @@\n /**\n  * React hook for creating OAuth configuration\n  * Generates Expo-compatible OAuth configuration with proper redirect URIs\n  */\n-export function useOAuthConfig(options: UseOAuthConfigOptions): ExpoOAuthConfig {\n+export function useOAuthConfig(options: UseOAuthConfigOptions): UseOAuthConfigResult {\n   const config = useMemo((): ExpoOAuthConfig => {\n-    // Generate redirect URI using Expo's helper\n-    const redirectUri = AuthSession.makeRedirectUri({\n-      scheme: options.scheme,\n-      path: options.path || 'auth/callback',\n-    });\n-\n-    // Default OAuth endpoints\n-    const endpoints = {\n-      authorization: options.endpoints?.authorization || `${options.baseUrl}/oauth/authorize`,\n-      token: options.endpoints?.token || `${options.baseUrl}/oauth/token`,\n-      revocation: options.endpoints?.revocation || `${options.baseUrl}/oauth/revoke`,\n-    };\n-\n     return {\n       clientId: options.clientId,\n-      endpoints,\n-      redirectUri,\n+      endpoints: {\n+        authorization: options.authorizationEndpoint,\n+        token: options.tokenEndpoint,\n+        revocation: options.revocationEndpoint,\n+      },\n+      redirectUri: options.redirectUri,\n       scopes: options.scopes || ['read', 'write'],\n       scheme: options.scheme,\n-      path: options.path || 'auth/callback',\n+      path: options.path,\n     };\n   }, [\n     options.clientId,\n-    options.baseUrl,\n+    options.authorizationEndpoint,\n+    options.tokenEndpoint,\n+    options.redirectUri,\n     options.scopes,\n     options.scheme,\n     options.path,\n-    options.endpoints,\n+    options.revocationEndpoint,\n   ]);\n \n-  return config;\n+  const generateAuthUrl = useMemo(() => {\n+    return async () => {\n+      const { ExpoPKCEAdapter } = await import('../adapters');\n+      const pkceAdapter = new ExpoPKCEAdapter();\n+\n+      // Generate PKCE parameters\n+      const pkceChallenge = await pkceAdapter.generateCodeChallenge();\n+      const state = await pkceAdapter.generateState();\n+\n+      // Build authorization URL\n+      const params = new URLSearchParams({\n+        response_type: 'code',\n+        client_id: config.clientId,\n+        redirect_uri: config.redirectUri,\n+        scope: config.scopes.join(' '),\n+        state,\n+        code_challenge: pkceChallenge.codeChallenge,\n+        code_challenge_method: pkceChallenge.codeChallengeMethod,\n+      });\n+\n+      const authUrl = `${config.endpoints.authorization}?${params.toString()}`;\n+\n+      return {\n+        authUrl,\n+        codeVerifier: pkceChallenge.codeVerifier,\n+        state,\n+      };\n+    };\n+  }, [config]);\n+\n+  return {\n+    config,\n+    generateAuthUrl,\n+  };\n }\n \n /**\n  * Hook for creating OAuth configuration from environment variables\n"
                },
                {
                    "date": 1752903052526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,10 @@\n   /** Custom redirect URI path */\n   path?: string;\n   /** Additional OAuth endpoints */\n   revocationEndpoint?: string;\n+  /** Additional parameters to include in authorization URL */\n+  additionalParameters?: Record<string, string>;\n }\n \n /**\n  * Result of useOAuthConfig hook\n"
                },
                {
                    "date": 1752903084755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n  * Result of useOAuthConfig hook\n  */\n export interface UseOAuthConfigResult {\n   config: ExpoOAuthConfig;\n+  additionalParameters?: Record<string, string>;\n   generateAuthUrl: () => Promise<{\n     authUrl: string;\n     codeVerifier: string;\n     state: string;\n"
                },
                {
                    "date": 1752903097107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,9 @@\n         scope: config.scopes.join(' '),\n         state,\n         code_challenge: pkceChallenge.codeChallenge,\n         code_challenge_method: pkceChallenge.codeChallengeMethod,\n+        ...options.additionalParameters,\n       });\n \n       const authUrl = `${config.endpoints.authorization}?${params.toString()}`;\n \n"
                },
                {
                    "date": 1752903108311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,9 @@\n   }, [config]);\n \n   return {\n     config,\n+    additionalParameters: options.additionalParameters,\n     generateAuthUrl,\n   };\n }\n \n"
                },
                {
                    "date": 1753013719098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n         codeVerifier: pkceChallenge.codeVerifier,\n         state,\n       };\n     };\n-  }, [config]);\n+  }, [config, options.additionalParameters]);\n \n   return {\n     config,\n     additionalParameters: options.additionalParameters,\n"
                },
                {
                    "date": 1753027282384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,11 @@\n /**\n  * React hook for creating OAuth configuration\n  * Generates Expo-compatible OAuth configuration with proper redirect URIs\n  */\n-export function useOAuthConfig(options: UseOAuthConfigOptions): UseOAuthConfigResult {\n+export function useOAuthConfig(\n+  options: UseOAuthConfigOptions\n+): UseOAuthConfigResult {\n   const config = useMemo((): ExpoOAuthConfig => {\n     return {\n       clientId: options.clientId,\n       endpoints: {\n@@ -53,10 +55,10 @@\n         revocation: options.revocationEndpoint,\n       },\n       redirectUri: options.redirectUri,\n       scopes: options.scopes || ['read', 'write'],\n-      scheme: options.scheme,\n-      path: options.path,\n+      scheme: options.scheme || 'oauth-expo',\n+      path: options.path || 'callback',\n     };\n   }, [\n     options.clientId,\n     options.authorizationEndpoint,\n"
                },
                {
                    "date": 1753027301736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n       clientId,\n       endpoints,\n       redirectUri,\n       scopes: options?.scopes || ['read', 'write'],\n-      scheme: options?.scheme,\n+      scheme: options?.scheme || 'oauth-expo',\n       path: options?.path || 'auth/callback',\n     };\n   }, [options?.scheme, options?.path, options?.scopes]);\n \n"
                },
                {
                    "date": 1753027992449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,11 +81,11 @@\n \n       // Build authorization URL\n       const params = new URLSearchParams({\n         response_type: 'code',\n-        client_id: config.clientId,\n-        redirect_uri: config.redirectUri,\n-        scope: config.scopes.join(' '),\n+        client_id: options.clientId,\n+        redirect_uri: options.redirectUri,\n+        scope: (options.scopes || []).join(' '),\n         state,\n         code_challenge: pkceChallenge.codeChallenge,\n         code_challenge_method: pkceChallenge.codeChallengeMethod,\n         ...options.additionalParameters,\n"
                },
                {
                    "date": 1753028160409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n       clientId: options.clientId,\n       endpoints: {\n         authorization: options.authorizationEndpoint,\n         token: options.tokenEndpoint,\n-        revocation: options.revocationEndpoint,\n+        revocation: options.revocationEndpoint || '',\n       },\n       redirectUri: options.redirectUri,\n       scopes: options.scopes || ['read', 'write'],\n       scheme: options.scheme || 'oauth-expo',\n"
                },
                {
                    "date": 1753028355025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n         codeVerifier: pkceChallenge.codeVerifier,\n         state,\n       };\n     };\n-  }, [config, options.additionalParameters]);\n+  }, [config, options.additionalParameters, options.clientId, options.redirectUri, options.scopes]);\n \n   return {\n     config,\n     additionalParameters: options.additionalParameters,\n"
                }
            ],
            "date": 1752840324219,
            "name": "Commit-0",
            "content": "import { useMemo } from 'react';\nimport * as AuthSession from 'expo-auth-session';\nimport type { ExpoOAuthConfig } from '../types';\n\n/**\n * Configuration options for useOAuthConfig hook\n */\nexport interface UseOAuthConfigOptions {\n  /** OAuth client ID */\n  clientId: string;\n  /** Base URL for OAuth endpoints */\n  baseUrl: string;\n  /** OAuth scopes to request */\n  scopes?: string[];\n  /** Custom redirect URI scheme */\n  scheme?: string;\n  /** Custom redirect URI path */\n  path?: string;\n  /** Additional OAuth endpoints (if different from standard) */\n  endpoints?: {\n    authorization?: string;\n    token?: string;\n    revocation?: string;\n  };\n}\n\n/**\n * React hook for creating OAuth configuration\n * Generates Expo-compatible OAuth configuration with proper redirect URIs\n */\nexport function useOAuthConfig(options: UseOAuthConfigOptions): ExpoOAuthConfig {\n  const config = useMemo((): ExpoOAuthConfig => {\n    // Generate redirect URI using Expo's helper\n    const redirectUri = AuthSession.makeRedirectUri({\n      scheme: options.scheme,\n      path: options.path || 'auth/callback',\n    });\n\n    // Default OAuth endpoints\n    const endpoints = {\n      authorization: options.endpoints?.authorization || `${options.baseUrl}/oauth/authorize`,\n      token: options.endpoints?.token || `${options.baseUrl}/oauth/token`,\n      revocation: options.endpoints?.revocation || `${options.baseUrl}/oauth/revoke`,\n    };\n\n    return {\n      clientId: options.clientId,\n      endpoints,\n      redirectUri,\n      scopes: options.scopes || ['read', 'write'],\n      scheme: options.scheme,\n      path: options.path || 'auth/callback',\n    };\n  }, [\n    options.clientId,\n    options.baseUrl,\n    options.scopes,\n    options.scheme,\n    options.path,\n    options.endpoints,\n  ]);\n\n  return config;\n}\n\n/**\n * Hook for creating OAuth configuration from environment variables\n * Useful for apps that store OAuth config in environment variables\n */\nexport function useOAuthConfigFromEnv(options?: {\n  scheme?: string;\n  path?: string;\n  scopes?: string[];\n}): ExpoOAuthConfig | null {\n  const config = useMemo((): ExpoOAuthConfig | null => {\n    // Check for required environment variables\n    const clientId = process.env.EXPO_PUBLIC_AUTH_CLIENT_ID;\n    const baseUrl = process.env.EXPO_PUBLIC_AUTH_OAUTH_BASE_URL;\n\n    if (!clientId || !baseUrl) {\n      console.warn(\n        'Missing required environment variables: EXPO_PUBLIC_AUTH_CLIENT_ID and/or EXPO_PUBLIC_AUTH_OAUTH_BASE_URL'\n      );\n      return null;\n    }\n\n    // Generate redirect URI\n    const redirectUri = AuthSession.makeRedirectUri({\n      scheme: options?.scheme,\n      path: options?.path || 'auth/callback',\n    });\n\n    // Build endpoints\n    const endpoints = {\n      authorization: `${baseUrl}/oauth/authorize`,\n      token: `${baseUrl}/oauth/token`,\n      revocation: `${baseUrl}/oauth/revoke`,\n    };\n\n    return {\n      clientId,\n      endpoints,\n      redirectUri,\n      scopes: options?.scopes || ['read', 'write'],\n      scheme: options?.scheme,\n      path: options?.path || 'auth/callback',\n    };\n  }, [options?.scheme, options?.path, options?.scopes]);\n\n  return config;\n}\n\n/**\n * Hook for generating OAuth authorization URL\n * Returns the URL and PKCE parameters needed for OAuth flow\n */\nexport function useOAuthAuthorizationUrl(\n  config: ExpoOAuthConfig | null,\n  additionalParameters?: Record<string, string>\n) {\n  return useMemo(() => {\n    if (!config) {\n      return null;\n    }\n\n    return {\n      /**\n       * Generate authorization URL with PKCE parameters\n       */\n      generateAuthUrl: async () => {\n        const { ExpoPKCEAdapter } = await import('../adapters');\n        const pkceAdapter = new ExpoPKCEAdapter();\n\n        // Generate PKCE parameters\n        const pkceChallenge = await pkceAdapter.generateCodeChallenge();\n        const state = pkceAdapter.generateState();\n\n        // Build authorization URL manually\n        const params = new URLSearchParams({\n          response_type: 'code',\n          client_id: config.clientId,\n          redirect_uri: config.redirectUri,\n          scope: config.scopes.join(' '),\n          state,\n          code_challenge: pkceChallenge.codeChallenge,\n          code_challenge_method: pkceChallenge.codeChallengeMethod,\n          ...additionalParameters,\n        });\n\n        const authUrl = `${config.endpoints.authorization}?${params.toString()}`;\n\n        return {\n          authUrl,\n          codeVerifier: pkceChallenge.codeVerifier,\n          state,\n        };\n      },\n    };\n  }, [config, additionalParameters]);\n}\n"
        }
    ]
}