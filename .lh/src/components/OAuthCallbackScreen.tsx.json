{
    "sourceFile": "src/components/OAuthCallbackScreen.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1752837555008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752837568015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,9 @@\n       }, redirectDelay);\n \n       return () => clearTimeout(timer);\n     }\n+    return undefined;\n   }, [status, autoRedirect, redirectDelay, onSuccess]);\n \n   const handleRetry = () => {\n     if (onRetry) {\n"
                },
                {
                    "date": 1752837578612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   messages,\n   autoRedirect = true,\n   redirectDelay = 1500,\n }: OAuthCallbackScreenProps) {\n-  const { status, message, handleCallback, retry } = useOAuthCallback(\n+  const { status, message, retry } = useOAuthCallback(\n     params,\n     config,\n     {\n       onSuccess,\n"
                },
                {
                    "date": 1752903150621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,19 +118,28 @@\n     }\n   };\n \n   return (\n-    <View style={[styles.container, customStyles?.container]}>\n+    <View\n+      style={[styles.container, customStyles?.container]}\n+      testID={`oauth-callback-${status}`}\n+    >\n       <View style={[styles.content, customStyles?.content]}>\n         {getStatusIcon()}\n-        \n-        <Text style={[styles.title, customStyles?.title]}>\n+\n+        <Text\n+          style={[styles.title, customStyles?.title]}\n+          testID=\"oauth-callback-title\"\n+        >\n           {status === 'processing' && 'Authenticating...'}\n           {status === 'success' && 'Success!'}\n           {status === 'error' && 'Authentication Failed'}\n         </Text>\n \n-        <Text style={[styles.message, customStyles?.message]}>\n+        <Text\n+          style={[styles.message, customStyles?.message]}\n+          testID=\"oauth-callback-message\"\n+        >\n           {getStatusMessage()}\n         </Text>\n \n         {status === 'error' && (\n@@ -138,8 +147,9 @@\n             style={[styles.button, customStyles?.button]}\n             onPress={handleRetry}\n             accessibilityRole=\"button\"\n             accessibilityLabel=\"Retry authentication\"\n+            testID=\"oauth-callback-retry-button\"\n           >\n             <Text style={[styles.buttonText, customStyles?.buttonText]}>\n               {messages?.retryButton || 'Retry'}\n             </Text>\n"
                },
                {
                    "date": 1752903179637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n /**\n  * Props for OAuthCallbackScreen component\n  */\n export interface OAuthCallbackScreenProps {\n-  /** OAuth callback parameters from URL */\n-  params: OAuthCallbackParams;\n+  /** OAuth callback parameters from URL (optional - will be extracted from URL if not provided) */\n+  params?: OAuthCallbackParams;\n   /** OAuth configuration */\n   config: ExpoOAuthConfig;\n   /** Callback when OAuth succeeds */\n   onSuccess?: (result: OAuthResult) => void;\n"
                },
                {
                    "date": 1752903195704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n  * Reusable OAuth callback screen component\n  * Handles OAuth callback processing with loading states and error handling\n  */\n export function OAuthCallbackScreen({\n-  params,\n+  params = {},\n   config,\n   onSuccess,\n   onError,\n   onRetry,\n"
                },
                {
                    "date": 1752903224343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n     switch (status) {\n       case 'processing':\n         return messages?.processing || 'Processing OAuth callback...';\n       case 'success':\n-        return messages?.success || 'OAuth authentication successful!';\n+        return messages?.success || 'Authentication successful!';\n       case 'error':\n         return messages?.error || message;\n       default:\n         return message;\n"
                },
                {
                    "date": 1752903242179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,12 @@\n     <View\n       style={[styles.container, customStyles?.container]}\n       testID={`oauth-callback-${status}`}\n     >\n-      <View style={[styles.content, customStyles?.content]}>\n+      <View\n+        style={[styles.content, customStyles?.content]}\n+        testID=\"oauth-callback-container\"\n+      >\n         {getStatusIcon()}\n \n         <Text\n           style={[styles.title, customStyles?.title]}\n@@ -136,9 +139,9 @@\n         </Text>\n \n         <Text\n           style={[styles.message, customStyles?.message]}\n-          testID=\"oauth-callback-message\"\n+          testID=\"oauth-callback-text\"\n         >\n           {getStatusMessage()}\n         </Text>\n \n@@ -146,13 +149,13 @@\n           <TouchableOpacity\n             style={[styles.button, customStyles?.button]}\n             onPress={handleRetry}\n             accessibilityRole=\"button\"\n-            accessibilityLabel=\"Retry authentication\"\n+            accessibilityLabel=\"Retry OAuth authentication\"\n             testID=\"oauth-callback-retry-button\"\n           >\n             <Text style={[styles.buttonText, customStyles?.buttonText]}>\n-              {messages?.retryButton || 'Retry'}\n+              {messages?.retryButton || 'Try Again'}\n             </Text>\n           </TouchableOpacity>\n         )}\n       </View>\n"
                },
                {
                    "date": 1752903274071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,11 +94,11 @@\n \n   const getStatusMessage = () => {\n     switch (status) {\n       case 'processing':\n-        return messages?.processing || 'Processing OAuth callback...';\n+        return messages?.processing || message || 'Processing OAuth callback...';\n       case 'success':\n-        return messages?.success || 'Authentication successful!';\n+        return messages?.success || message || 'Authentication successful!';\n       case 'error':\n         return messages?.error || message;\n       default:\n         return message;\n"
                },
                {
                    "date": 1752903305633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,17 +24,23 @@\n   /** Callback when OAuth fails */\n   onError?: (error: Error) => void;\n   /** Callback for retry button */\n   onRetry?: () => void;\n-  /** Custom styles */\n+  /** Custom styles (object with specific style properties) */\n   styles?: {\n     container?: ViewStyle;\n     content?: ViewStyle;\n     title?: TextStyle;\n     message?: TextStyle;\n     button?: ViewStyle;\n     buttonText?: TextStyle;\n   };\n+  /** Custom style (single style object for container) */\n+  style?: ViewStyle;\n+  /** Custom text style */\n+  textStyle?: TextStyle;\n+  /** Custom button style */\n+  buttonStyle?: ViewStyle;\n   /** Custom messages */\n   messages?: {\n     processing?: string;\n     success?: string;\n"
                },
                {
                    "date": 1752903316880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,11 @@\n   onSuccess,\n   onError,\n   onRetry,\n   styles: customStyles,\n+  style,\n+  textStyle,\n+  buttonStyle,\n   messages,\n   autoRedirect = true,\n   redirectDelay = 1500,\n }: OAuthCallbackScreenProps) {\n"
                },
                {
                    "date": 1752903333915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n       style={[styles.container, customStyles?.container]}\n       testID={`oauth-callback-${status}`}\n     >\n       <View\n-        style={[styles.content, customStyles?.content]}\n+        style={[styles.content, customStyles?.content, style]}\n         testID=\"oauth-callback-container\"\n       >\n         {getStatusIcon()}\n \n@@ -147,17 +147,17 @@\n           {status === 'error' && 'Authentication Failed'}\n         </Text>\n \n         <Text\n-          style={[styles.message, customStyles?.message]}\n+          style={[styles.message, customStyles?.message, textStyle]}\n           testID=\"oauth-callback-text\"\n         >\n           {getStatusMessage()}\n         </Text>\n \n         {status === 'error' && (\n           <TouchableOpacity\n-            style={[styles.button, customStyles?.button]}\n+            style={[styles.button, customStyles?.button, buttonStyle]}\n             onPress={handleRetry}\n             accessibilityRole=\"button\"\n             accessibilityLabel=\"Retry OAuth authentication\"\n             testID=\"oauth-callback-retry-button\"\n"
                },
                {
                    "date": 1752904248994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,17 @@\n   type ViewStyle,\n   type TextStyle,\n } from 'react-native';\n import { useOAuthCallback } from '../hooks';\n-import type { OAuthCallbackParams, ExpoOAuthConfig, OAuthResult } from '../types';\n+import type {\n+  OAuthCallbackParams,\n+  ExpoOAuthConfig,\n+  OAuthResult,\n+  OAuthTheme,\n+  OAuthVariant,\n+  OAuthThemeConfig,\n+  OAuthComponentOverrides\n+} from '../types';\n \n /**\n  * Props for OAuthCallbackScreen component\n  */\n"
                },
                {
                    "date": 1752904261394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,16 @@\n   /** Custom text style */\n   textStyle?: TextStyle;\n   /** Custom button style */\n   buttonStyle?: ViewStyle;\n+  /** Theme variant */\n+  theme?: OAuthTheme;\n+  /** Component variant */\n+  variant?: OAuthVariant;\n+  /** Unistyles theme configuration */\n+  themeConfig?: OAuthThemeConfig;\n+  /** Custom component overrides */\n+  components?: OAuthComponentOverrides;\n   /** Custom messages */\n   messages?: {\n     processing?: string;\n     success?: string;\n"
                },
                {
                    "date": 1752904273904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,12 @@\n   styles: customStyles,\n   style,\n   textStyle,\n   buttonStyle,\n+  theme = 'auto',\n+  variant = 'fullscreen',\n+  themeConfig,\n+  components,\n   messages,\n   autoRedirect = true,\n   redirectDelay = 1500,\n }: OAuthCallbackScreenProps) {\n"
                },
                {
                    "date": 1752904286068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,8 +90,11 @@\n   messages,\n   autoRedirect = true,\n   redirectDelay = 1500,\n }: OAuthCallbackScreenProps) {\n+  // Get theme-aware styles\n+  const themedStyles = getThemedStyles(theme, variant, themeConfig);\n+\n   const { status, message, retry } = useOAuthCallback(\n     params,\n     config,\n     {\n"
                },
                {
                    "date": 1752904301769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,15 +137,27 @@\n     }\n   };\n \n   const getStatusIcon = () => {\n+    const LoadingIndicator = components?.LoadingIndicator || ActivityIndicator;\n+    const SuccessIcon = components?.SuccessIcon;\n+    const ErrorIcon = components?.ErrorIcon;\n+\n     switch (status) {\n       case 'processing':\n-        return <ActivityIndicator size=\"large\" color=\"#007AFF\" />;\n+        return <LoadingIndicator size=\"large\" color={themedStyles.colors.primary} />;\n       case 'success':\n-        return <Text style={[styles.icon, customStyles?.title]}>✓</Text>;\n+        return SuccessIcon ? (\n+          <SuccessIcon />\n+        ) : (\n+          <Text style={[themedStyles.icon, themedStyles.successIcon, customStyles?.title]}>✓</Text>\n+        );\n       case 'error':\n-        return <Text style={[styles.icon, styles.errorIcon, customStyles?.title]}>✗</Text>;\n+        return ErrorIcon ? (\n+          <ErrorIcon />\n+        ) : (\n+          <Text style={[themedStyles.icon, themedStyles.errorIcon, customStyles?.title]}>✗</Text>\n+        );\n       default:\n         return null;\n     }\n   };\n"
                },
                {
                    "date": 1752904326829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,50 +161,55 @@\n         return null;\n     }\n   };\n \n+  const Container = components?.Container || View;\n+  const Title = components?.Title || Text;\n+  const Message = components?.Message || Text;\n+  const Button = components?.Button || TouchableOpacity;\n+\n   return (\n-    <View\n-      style={[styles.container, customStyles?.container]}\n+    <Container\n+      style={[themedStyles.container, customStyles?.container]}\n       testID={`oauth-callback-${status}`}\n     >\n       <View\n-        style={[styles.content, customStyles?.content, style]}\n+        style={[themedStyles.content, customStyles?.content, style]}\n         testID=\"oauth-callback-container\"\n       >\n         {getStatusIcon()}\n \n-        <Text\n-          style={[styles.title, customStyles?.title]}\n+        <Title\n+          style={[themedStyles.title, customStyles?.title]}\n           testID=\"oauth-callback-title\"\n         >\n           {status === 'processing' && 'Authenticating...'}\n           {status === 'success' && 'Success!'}\n           {status === 'error' && 'Authentication Failed'}\n-        </Text>\n+        </Title>\n \n-        <Text\n-          style={[styles.message, customStyles?.message, textStyle]}\n+        <Message\n+          style={[themedStyles.message, customStyles?.message, textStyle]}\n           testID=\"oauth-callback-text\"\n         >\n           {getStatusMessage()}\n-        </Text>\n+        </Message>\n \n         {status === 'error' && (\n-          <TouchableOpacity\n-            style={[styles.button, customStyles?.button, buttonStyle]}\n+          <Button\n+            style={[themedStyles.button, customStyles?.button, buttonStyle]}\n             onPress={handleRetry}\n             accessibilityRole=\"button\"\n             accessibilityLabel=\"Retry OAuth authentication\"\n             testID=\"oauth-callback-retry-button\"\n           >\n-            <Text style={[styles.buttonText, customStyles?.buttonText]}>\n+            <Text style={[themedStyles.buttonText, customStyles?.buttonText]}>\n               {messages?.retryButton || 'Try Again'}\n             </Text>\n-          </TouchableOpacity>\n+          </Button>\n         )}\n       </View>\n-    </View>\n+    </Container>\n   );\n }\n \n /**\n"
                },
                {
                    "date": 1752904354998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -295,4 +295,183 @@\n     fontSize: 16,\n     color: '#666666',\n   },\n });\n+\n+/**\n+ * Default theme configurations\n+ */\n+const defaultThemes: Record<OAuthTheme, OAuthThemeConfig> = {\n+  light: {\n+    colors: {\n+      background: '#ffffff',\n+      surface: '#f8f9fa',\n+      primary: '#007AFF',\n+      secondary: '#5856d6',\n+      text: '#000000',\n+      textSecondary: '#666666',\n+      success: '#34c759',\n+      error: '#ff3b30',\n+      warning: '#ff9500',\n+      border: '#e1e1e1',\n+    },\n+    spacing: {\n+      xs: 4,\n+      sm: 8,\n+      md: 16,\n+      lg: 24,\n+      xl: 32,\n+    },\n+    typography: {\n+      h1: { fontSize: 32, fontWeight: '700' },\n+      h2: { fontSize: 24, fontWeight: '600' },\n+      h3: { fontSize: 20, fontWeight: '600' },\n+      body: { fontSize: 16, fontWeight: '400' },\n+      caption: { fontSize: 14, fontWeight: '400' },\n+    },\n+    borderRadius: {\n+      sm: 4,\n+      md: 8,\n+      lg: 12,\n+      xl: 16,\n+    },\n+    shadows: {\n+      sm: {\n+        shadowColor: '#000',\n+        shadowOffset: { width: 0, height: 1 },\n+        shadowOpacity: 0.1,\n+        shadowRadius: 2,\n+        elevation: 2,\n+      },\n+      md: {\n+        shadowColor: '#000',\n+        shadowOffset: { width: 0, height: 2 },\n+        shadowOpacity: 0.15,\n+        shadowRadius: 4,\n+        elevation: 4,\n+      },\n+      lg: {\n+        shadowColor: '#000',\n+        shadowOffset: { width: 0, height: 4 },\n+        shadowOpacity: 0.2,\n+        shadowRadius: 8,\n+        elevation: 8,\n+      },\n+    },\n+  },\n+  dark: {\n+    colors: {\n+      background: '#000000',\n+      surface: '#1c1c1e',\n+      primary: '#0a84ff',\n+      secondary: '#5e5ce6',\n+      text: '#ffffff',\n+      textSecondary: '#8e8e93',\n+      success: '#30d158',\n+      error: '#ff453a',\n+      warning: '#ff9f0a',\n+      border: '#38383a',\n+    },\n+    spacing: {\n+      xs: 4,\n+      sm: 8,\n+      md: 16,\n+      lg: 24,\n+      xl: 32,\n+    },\n+    typography: {\n+      h1: { fontSize: 32, fontWeight: '700' },\n+      h2: { fontSize: 24, fontWeight: '600' },\n+      h3: { fontSize: 20, fontWeight: '600' },\n+      body: { fontSize: 16, fontWeight: '400' },\n+      caption: { fontSize: 14, fontWeight: '400' },\n+    },\n+    borderRadius: {\n+      sm: 4,\n+      md: 8,\n+      lg: 12,\n+      xl: 16,\n+    },\n+    shadows: {\n+      sm: {\n+        shadowColor: '#000',\n+        shadowOffset: { width: 0, height: 1 },\n+        shadowOpacity: 0.3,\n+        shadowRadius: 2,\n+        elevation: 2,\n+      },\n+      md: {\n+        shadowColor: '#000',\n+        shadowOffset: { width: 0, height: 2 },\n+        shadowOpacity: 0.4,\n+        shadowRadius: 4,\n+        elevation: 4,\n+      },\n+      lg: {\n+        shadowColor: '#000',\n+        shadowOffset: { width: 0, height: 4 },\n+        shadowOpacity: 0.5,\n+        shadowRadius: 8,\n+        elevation: 8,\n+      },\n+    },\n+  },\n+  auto: {\n+    // Auto theme will be resolved at runtime based on system preference\n+    // For now, defaults to light theme\n+    colors: {\n+      background: '#ffffff',\n+      surface: '#f8f9fa',\n+      primary: '#007AFF',\n+      secondary: '#5856d6',\n+      text: '#000000',\n+      textSecondary: '#666666',\n+      success: '#34c759',\n+      error: '#ff3b30',\n+      warning: '#ff9500',\n+      border: '#e1e1e1',\n+    },\n+    spacing: {\n+      xs: 4,\n+      sm: 8,\n+      md: 16,\n+      lg: 24,\n+      xl: 32,\n+    },\n+    typography: {\n+      h1: { fontSize: 32, fontWeight: '700' },\n+      h2: { fontSize: 24, fontWeight: '600' },\n+      h3: { fontSize: 20, fontWeight: '600' },\n+      body: { fontSize: 16, fontWeight: '400' },\n+      caption: { fontSize: 14, fontWeight: '400' },\n+    },\n+    borderRadius: {\n+      sm: 4,\n+      md: 8,\n+      lg: 12,\n+      xl: 16,\n+    },\n+    shadows: {\n+      sm: {\n+        shadowColor: '#000',\n+        shadowOffset: { width: 0, height: 1 },\n+        shadowOpacity: 0.1,\n+        shadowRadius: 2,\n+        elevation: 2,\n+      },\n+      md: {\n+        shadowColor: '#000',\n+        shadowOffset: { width: 0, height: 2 },\n+        shadowOpacity: 0.15,\n+        shadowRadius: 4,\n+        elevation: 4,\n+      },\n+      lg: {\n+        shadowColor: '#000',\n+        shadowOffset: { width: 0, height: 4 },\n+        shadowOpacity: 0.2,\n+        shadowRadius: 8,\n+        elevation: 8,\n+      },\n+    },\n+  },\n+};\n"
                },
                {
                    "date": 1752904378946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -474,4 +474,160 @@\n       },\n     },\n   },\n };\n+\n+/**\n+ * Get themed styles based on theme, variant, and custom theme config\n+ */\n+function getThemedStyles(\n+  theme: OAuthTheme = 'auto',\n+  variant: OAuthVariant = 'fullscreen',\n+  customThemeConfig?: OAuthThemeConfig\n+) {\n+  // Resolve theme config\n+  const themeConfig = customThemeConfig || defaultThemes[theme];\n+\n+  // Base styles for all variants\n+  const baseStyles = {\n+    colors: themeConfig.colors,\n+    icon: {\n+      fontSize: 48,\n+      marginBottom: themeConfig.spacing.lg,\n+      color: themeConfig.colors.primary,\n+    },\n+    successIcon: {\n+      color: themeConfig.colors.success,\n+    },\n+    errorIcon: {\n+      color: themeConfig.colors.error,\n+    },\n+    title: {\n+      fontSize: themeConfig.typography.h2.fontSize,\n+      fontWeight: themeConfig.typography.h2.fontWeight,\n+      color: themeConfig.colors.text,\n+      marginBottom: themeConfig.spacing.sm,\n+      textAlign: 'center' as const,\n+    },\n+    message: {\n+      fontSize: themeConfig.typography.body.fontSize,\n+      color: themeConfig.colors.textSecondary,\n+      textAlign: 'center' as const,\n+      lineHeight: 22,\n+      marginBottom: themeConfig.spacing.xl,\n+    },\n+    buttonText: {\n+      color: '#ffffff',\n+      fontSize: themeConfig.typography.body.fontSize,\n+      fontWeight: '600',\n+      textAlign: 'center' as const,\n+    },\n+  };\n+\n+  // Variant-specific styles\n+  switch (variant) {\n+    case 'minimal':\n+      return {\n+        ...baseStyles,\n+        container: {\n+          flex: 1,\n+          backgroundColor: 'transparent',\n+          justifyContent: 'center',\n+          alignItems: 'center',\n+          padding: themeConfig.spacing.md,\n+        },\n+        content: {\n+          alignItems: 'center',\n+          maxWidth: 280,\n+        },\n+        button: {\n+          backgroundColor: themeConfig.colors.primary,\n+          paddingHorizontal: themeConfig.spacing.lg,\n+          paddingVertical: themeConfig.spacing.sm,\n+          borderRadius: themeConfig.borderRadius.sm,\n+          minWidth: 100,\n+        },\n+      };\n+\n+    case 'card':\n+      return {\n+        ...baseStyles,\n+        container: {\n+          flex: 1,\n+          backgroundColor: themeConfig.colors.background,\n+          justifyContent: 'center',\n+          alignItems: 'center',\n+          padding: themeConfig.spacing.lg,\n+        },\n+        content: {\n+          alignItems: 'center',\n+          maxWidth: 320,\n+          backgroundColor: themeConfig.colors.surface,\n+          padding: themeConfig.spacing.xl,\n+          borderRadius: themeConfig.borderRadius.lg,\n+          borderWidth: 1,\n+          borderColor: themeConfig.colors.border,\n+          ...themeConfig.shadows.md,\n+        },\n+        button: {\n+          backgroundColor: themeConfig.colors.primary,\n+          paddingHorizontal: themeConfig.spacing.xl,\n+          paddingVertical: themeConfig.spacing.md,\n+          borderRadius: themeConfig.borderRadius.md,\n+          minWidth: 120,\n+          ...themeConfig.shadows.sm,\n+        },\n+      };\n+\n+    case 'modal':\n+      return {\n+        ...baseStyles,\n+        container: {\n+          flex: 1,\n+          backgroundColor: 'rgba(0, 0, 0, 0.5)',\n+          justifyContent: 'center',\n+          alignItems: 'center',\n+          padding: themeConfig.spacing.lg,\n+        },\n+        content: {\n+          alignItems: 'center',\n+          maxWidth: 340,\n+          backgroundColor: themeConfig.colors.surface,\n+          padding: themeConfig.spacing.xl,\n+          borderRadius: themeConfig.borderRadius.xl,\n+          ...themeConfig.shadows.lg,\n+        },\n+        button: {\n+          backgroundColor: themeConfig.colors.primary,\n+          paddingHorizontal: themeConfig.spacing.xl,\n+          paddingVertical: themeConfig.spacing.md,\n+          borderRadius: themeConfig.borderRadius.md,\n+          minWidth: 140,\n+          ...themeConfig.shadows.sm,\n+        },\n+      };\n+\n+    case 'fullscreen':\n+    default:\n+      return {\n+        ...baseStyles,\n+        container: {\n+          flex: 1,\n+          backgroundColor: themeConfig.colors.background,\n+          justifyContent: 'center',\n+          alignItems: 'center',\n+          padding: themeConfig.spacing.lg,\n+        },\n+        content: {\n+          alignItems: 'center',\n+          maxWidth: 300,\n+        },\n+        button: {\n+          backgroundColor: themeConfig.colors.primary,\n+          paddingHorizontal: themeConfig.spacing.xl,\n+          paddingVertical: themeConfig.spacing.md,\n+          borderRadius: themeConfig.borderRadius.md,\n+          minWidth: 120,\n+        },\n+      };\n+  }\n+}\n"
                }
            ],
            "date": 1752837555008,
            "name": "Commit-0",
            "content": "import { useEffect } from 'react';\nimport {\n  View,\n  Text,\n  ActivityIndicator,\n  StyleSheet,\n  TouchableOpacity,\n  type ViewStyle,\n  type TextStyle,\n} from 'react-native';\nimport { useOAuthCallback } from '../hooks';\nimport type { OAuthCallbackParams, ExpoOAuthConfig, OAuthResult } from '../types';\n\n/**\n * Props for OAuthCallbackScreen component\n */\nexport interface OAuthCallbackScreenProps {\n  /** OAuth callback parameters from URL */\n  params: OAuthCallbackParams;\n  /** OAuth configuration */\n  config: ExpoOAuthConfig;\n  /** Callback when OAuth succeeds */\n  onSuccess?: (result: OAuthResult) => void;\n  /** Callback when OAuth fails */\n  onError?: (error: Error) => void;\n  /** Callback for retry button */\n  onRetry?: () => void;\n  /** Custom styles */\n  styles?: {\n    container?: ViewStyle;\n    content?: ViewStyle;\n    title?: TextStyle;\n    message?: TextStyle;\n    button?: ViewStyle;\n    buttonText?: TextStyle;\n  };\n  /** Custom messages */\n  messages?: {\n    processing?: string;\n    success?: string;\n    error?: string;\n    retryButton?: string;\n  };\n  /** Whether to auto-redirect on success */\n  autoRedirect?: boolean;\n  /** Delay before auto-redirect (ms) */\n  redirectDelay?: number;\n}\n\n/**\n * Reusable OAuth callback screen component\n * Handles OAuth callback processing with loading states and error handling\n */\nexport function OAuthCallbackScreen({\n  params,\n  config,\n  onSuccess,\n  onError,\n  onRetry,\n  styles: customStyles,\n  messages,\n  autoRedirect = true,\n  redirectDelay = 1500,\n}: OAuthCallbackScreenProps) {\n  const { status, message, handleCallback, retry } = useOAuthCallback(\n    params,\n    config,\n    {\n      onSuccess,\n      onError,\n      autoStart: true,\n    }\n  );\n\n  // Handle auto-redirect on success\n  useEffect(() => {\n    if (status === 'success' && autoRedirect && onSuccess) {\n      const timer = setTimeout(() => {\n        // This will be handled by the onSuccess callback\n      }, redirectDelay);\n\n      return () => clearTimeout(timer);\n    }\n  }, [status, autoRedirect, redirectDelay, onSuccess]);\n\n  const handleRetry = () => {\n    if (onRetry) {\n      onRetry();\n    } else {\n      retry();\n    }\n  };\n\n  const getStatusMessage = () => {\n    switch (status) {\n      case 'processing':\n        return messages?.processing || 'Processing OAuth callback...';\n      case 'success':\n        return messages?.success || 'OAuth authentication successful!';\n      case 'error':\n        return messages?.error || message;\n      default:\n        return message;\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status) {\n      case 'processing':\n        return <ActivityIndicator size=\"large\" color=\"#007AFF\" />;\n      case 'success':\n        return <Text style={[styles.icon, customStyles?.title]}>✓</Text>;\n      case 'error':\n        return <Text style={[styles.icon, styles.errorIcon, customStyles?.title]}>✗</Text>;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <View style={[styles.container, customStyles?.container]}>\n      <View style={[styles.content, customStyles?.content]}>\n        {getStatusIcon()}\n        \n        <Text style={[styles.title, customStyles?.title]}>\n          {status === 'processing' && 'Authenticating...'}\n          {status === 'success' && 'Success!'}\n          {status === 'error' && 'Authentication Failed'}\n        </Text>\n\n        <Text style={[styles.message, customStyles?.message]}>\n          {getStatusMessage()}\n        </Text>\n\n        {status === 'error' && (\n          <TouchableOpacity\n            style={[styles.button, customStyles?.button]}\n            onPress={handleRetry}\n            accessibilityRole=\"button\"\n            accessibilityLabel=\"Retry authentication\"\n          >\n            <Text style={[styles.buttonText, customStyles?.buttonText]}>\n              {messages?.retryButton || 'Retry'}\n            </Text>\n          </TouchableOpacity>\n        )}\n      </View>\n    </View>\n  );\n}\n\n/**\n * Default styles for the OAuth callback screen\n */\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  content: {\n    alignItems: 'center',\n    maxWidth: 300,\n  },\n  icon: {\n    fontSize: 48,\n    marginBottom: 20,\n    color: '#007AFF',\n  },\n  errorIcon: {\n    color: '#FF3B30',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '600',\n    color: '#000000',\n    marginBottom: 12,\n    textAlign: 'center',\n  },\n  message: {\n    fontSize: 16,\n    color: '#666666',\n    textAlign: 'center',\n    lineHeight: 22,\n    marginBottom: 30,\n  },\n  button: {\n    backgroundColor: '#007AFF',\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 8,\n    minWidth: 120,\n  },\n  buttonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n});\n\n/**\n * Minimal OAuth callback screen with just loading indicator\n */\nexport function MinimalOAuthCallbackScreen({\n  params,\n  config,\n  onSuccess,\n  onError,\n}: Pick<OAuthCallbackScreenProps, 'params' | 'config' | 'onSuccess' | 'onError'>) {\n  useOAuthCallback(params, config, { onSuccess, onError });\n\n  return (\n    <View style={minimalStyles.container}>\n      <ActivityIndicator size=\"large\" color=\"#007AFF\" />\n      <Text style={minimalStyles.text}>Authenticating...</Text>\n    </View>\n  );\n}\n\nconst minimalStyles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#ffffff',\n  },\n  text: {\n    marginTop: 16,\n    fontSize: 16,\n    color: '#666666',\n  },\n});\n"
        }
    ]
}