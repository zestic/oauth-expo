{
    "sourceFile": "src/components/UnistylesOAuthExamples.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753013702172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753013702172,
            "name": "Commit-0",
            "content": "/**\n * Unistyles Integration Examples for OAuth Components\n *\n * This file demonstrates how to integrate the OAuth components with react-native-unistyles\n * for theme-aware, responsive styling.\n */\n\n// All imports are commented out since this is an example file\n// import React from 'react';\n// import { View, Text, ActivityIndicator } from 'react-native';\n// import { OAuthCallbackScreen } from './OAuthCallbackScreen';\n// import type { ExpoOAuthConfig, OAuthCallbackParams } from '../types';\n\n// Example: Using react-native-unistyles (pseudo-code since we don't have the actual dependency)\n// import { createStyleSheet, useStyles } from 'react-native-unistyles';\n\n/**\n * Example 1: Basic Unistyles Integration\n */\n/*\nconst oauthStylesheet = createStyleSheet((theme) => ({\n  container: {\n    backgroundColor: theme.colors.background,\n    padding: theme.spacing.lg,\n  },\n  title: {\n    fontSize: theme.typography.h2.fontSize,\n    fontWeight: theme.typography.h2.fontWeight,\n    color: theme.colors.text,\n    marginBottom: theme.spacing.md,\n  },\n  message: {\n    fontSize: theme.typography.body.fontSize,\n    color: theme.colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: theme.typography.body.lineHeight,\n  },\n  button: {\n    backgroundColor: theme.colors.primary,\n    borderRadius: theme.borderRadius.md,\n    paddingHorizontal: theme.spacing.xl,\n    paddingVertical: theme.spacing.md,\n    ...theme.shadows.sm,\n  },\n  buttonText: {\n    color: theme.colors.onPrimary,\n    fontSize: theme.typography.button.fontSize,\n    fontWeight: theme.typography.button.fontWeight,\n  },\n}));\n\nexport function UnistylesOAuthScreen({ config, params }: {\n  config: ExpoOAuthConfig;\n  params?: OAuthCallbackParams;\n}) {\n  const { styles } = useStyles(oauthStylesheet);\n\n  return (\n    <OAuthCallbackScreen\n      config={config}\n      params={params}\n      styles={{\n        container: styles.container,\n        title: styles.title,\n        message: styles.message,\n        button: styles.button,\n        buttonText: styles.buttonText,\n      }}\n    />\n  );\n}\n*/\n\n/**\n * Example 2: Theme-Aware OAuth Screen with Variants\n */\n/*\nconst variantStylesheet = createStyleSheet((theme) => ({\n  // Card variant\n  cardContainer: {\n    backgroundColor: theme.colors.surface,\n    borderRadius: theme.borderRadius.lg,\n    padding: theme.spacing.xl,\n    margin: theme.spacing.lg,\n    ...theme.shadows.md,\n    variants: {\n      elevated: {\n        true: {\n          ...theme.shadows.lg,\n        },\n      },\n    },\n  },\n  \n  // Modal variant\n  modalOverlay: {\n    backgroundColor: 'rgba(0, 0, 0, 0.6)',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  \n  modalContent: {\n    backgroundColor: theme.colors.surface,\n    borderRadius: theme.borderRadius.xl,\n    padding: theme.spacing.xl,\n    maxWidth: 340,\n    width: '90%',\n    ...theme.shadows.lg,\n  },\n  \n  // Responsive button\n  button: {\n    backgroundColor: theme.colors.primary,\n    borderRadius: theme.borderRadius.md,\n    paddingHorizontal: theme.spacing.lg,\n    paddingVertical: theme.spacing.md,\n    minWidth: 120,\n    variants: {\n      size: {\n        small: {\n          paddingHorizontal: theme.spacing.md,\n          paddingVertical: theme.spacing.sm,\n          minWidth: 100,\n        },\n        large: {\n          paddingHorizontal: theme.spacing.xl,\n          paddingVertical: theme.spacing.lg,\n          minWidth: 160,\n        },\n      },\n      variant: {\n        outline: {\n          backgroundColor: 'transparent',\n          borderWidth: 1,\n          borderColor: theme.colors.primary,\n        },\n        ghost: {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  },\n}));\n\nexport function ThemedOAuthScreen({ \n  config, \n  params, \n  variant = 'card',\n  elevated = false \n}: {\n  config: ExpoOAuthConfig;\n  params?: OAuthCallbackParams;\n  variant?: 'card' | 'modal' | 'fullscreen';\n  elevated?: boolean;\n}) {\n  const { styles } = useStyles(variantStylesheet);\n\n  if (variant === 'modal') {\n    return (\n      <View style={styles.modalOverlay}>\n        <OAuthCallbackScreen\n          config={config}\n          params={params}\n          variant=\"modal\"\n          style={styles.modalContent}\n        />\n      </View>\n    );\n  }\n\n  return (\n    <OAuthCallbackScreen\n      config={config}\n      params={params}\n      variant={variant}\n      style={variant === 'card' ? styles.cardContainer({ elevated }) : undefined}\n    />\n  );\n}\n*/\n\n/**\n * Example 3: Custom Component Overrides with Unistyles\n */\n/*\nconst customComponentsStylesheet = createStyleSheet((theme) => ({\n  customLoader: {\n    padding: theme.spacing.md,\n  },\n  customSuccessIcon: {\n    fontSize: 64,\n    color: theme.colors.success,\n    marginBottom: theme.spacing.lg,\n  },\n  customErrorIcon: {\n    fontSize: 64,\n    color: theme.colors.error,\n    marginBottom: theme.spacing.lg,\n  },\n  customButton: {\n    backgroundColor: theme.colors.secondary,\n    borderRadius: theme.borderRadius.xl,\n    paddingHorizontal: theme.spacing.xl,\n    paddingVertical: theme.spacing.lg,\n    ...theme.shadows.md,\n  },\n}));\n\n// Custom components\nfunction CustomLoadingIndicator() {\n  const { styles, theme } = useStyles(customComponentsStylesheet);\n  return (\n    <View style={styles.customLoader}>\n      <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n      <Text style={{ color: theme.colors.text, marginTop: theme.spacing.sm }}>\n        Authenticating...\n      </Text>\n    </View>\n  );\n}\n\nfunction CustomSuccessIcon() {\n  const { styles } = useStyles(customComponentsStylesheet);\n  return <Text style={styles.customSuccessIcon}>üéâ</Text>;\n}\n\nfunction CustomErrorIcon() {\n  const { styles } = useStyles(customComponentsStylesheet);\n  return <Text style={styles.customErrorIcon}>‚ùå</Text>;\n}\n\nexport function CustomOAuthScreen({ config, params }: {\n  config: ExpoOAuthConfig;\n  params?: OAuthCallbackParams;\n}) {\n  const { styles } = useStyles(customComponentsStylesheet);\n\n  return (\n    <OAuthCallbackScreen\n      config={config}\n      params={params}\n      components={{\n        LoadingIndicator: CustomLoadingIndicator,\n        SuccessIcon: CustomSuccessIcon,\n        ErrorIcon: CustomErrorIcon,\n      }}\n      buttonStyle={styles.customButton}\n    />\n  );\n}\n*/\n\n/**\n * Example 4: Responsive OAuth Screen\n */\n/*\nconst responsiveStylesheet = createStyleSheet((theme) => ({\n  container: {\n    padding: theme.spacing.md,\n    variants: {\n      screen: {\n        xs: { padding: theme.spacing.sm },\n        sm: { padding: theme.spacing.md },\n        md: { padding: theme.spacing.lg },\n        lg: { padding: theme.spacing.xl },\n      },\n    },\n  },\n  content: {\n    maxWidth: 300,\n    variants: {\n      screen: {\n        xs: { maxWidth: 280 },\n        sm: { maxWidth: 320 },\n        md: { maxWidth: 400 },\n        lg: { maxWidth: 480 },\n      },\n    },\n  },\n  title: {\n    fontSize: theme.typography.h2.fontSize,\n    variants: {\n      screen: {\n        xs: { fontSize: theme.typography.h3.fontSize },\n        lg: { fontSize: theme.typography.h1.fontSize },\n      },\n    },\n  },\n}));\n\nexport function ResponsiveOAuthScreen({ config, params }: {\n  config: ExpoOAuthConfig;\n  params?: OAuthCallbackParams;\n}) {\n  const { styles } = useStyles(responsiveStylesheet);\n\n  return (\n    <OAuthCallbackScreen\n      config={config}\n      params={params}\n      styles={{\n        container: styles.container,\n        content: styles.content,\n        title: styles.title,\n      }}\n    />\n  );\n}\n*/\n\n/**\n * Example 5: Dark/Light Theme Toggle\n */\n/*\nexport function ThemeAwareOAuthScreen({ \n  config, \n  params,\n  forceDarkMode = false \n}: {\n  config: ExpoOAuthConfig;\n  params?: OAuthCallbackParams;\n  forceDarkMode?: boolean;\n}) {\n  return (\n    <OAuthCallbackScreen\n      config={config}\n      params={params}\n      theme={forceDarkMode ? 'dark' : 'auto'}\n      variant=\"card\"\n    />\n  );\n}\n*/\n\n// Export types for TypeScript users\nexport type {\n  OAuthTheme,\n  OAuthVariant,\n  OAuthThemeConfig,\n  OAuthComponentOverrides,\n} from '../types';\n"
        }
    ]
}