{
    "sourceFile": "src/adapters/ExpoStorageAdapter.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1752908193517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752998646605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+import AsyncStorage from '@react-native-async-storage/async-storage';\n+import type { StorageAdapter } from '../types';\n+\n+/**\n+ * Expo/React Native storage adapter using AsyncStorage\n+ * Provides cross-platform storage for OAuth tokens and state\n+ */\n+export class ExpoStorageAdapter implements StorageAdapter {\n+  async setItem(key: string, value: string): Promise<void> {\n+    try {\n+      await AsyncStorage.setItem(key, value);\n+    } catch (error) {\n+      throw new Error(`Failed to store item with key \"${key}\": ${error}`);\n+    }\n+  }\n+\n+  async getItem(key: string): Promise<string | null> {\n+    try {\n+      return await AsyncStorage.getItem(key);\n+    } catch (error) {\n+      throw new Error(`Failed to retrieve item with key \"${key}\": ${error}`);\n+    }\n+  }\n+\n+  async removeItem(key: string): Promise<void> {\n+    try {\n+      await AsyncStorage.removeItem(key);\n+    } catch (error) {\n+      throw new Error(`Failed to remove item with key \"${key}\": ${error}`);\n+    }\n+  }\n+\n+  async removeItems(keys: string[]): Promise<void> {\n+    try {\n+      await AsyncStorage.multiRemove(keys);\n+    } catch (error) {\n+      throw new Error(`Failed to remove items with keys \"${keys.join(', ')}\": ${error}`);\n+    }\n+  }\n+\n+  /**\n+   * Clear all OAuth-related storage items\n+   * Useful for logout functionality\n+   */\n+  async clearOAuthStorage(): Promise<void> {\n+    const oauthKeys = [\n+      'oauth_access_token',\n+      'oauth_refresh_token',\n+      'oauth_state',\n+      'oauth_code_verifier',\n+      'oauth_expires_at',\n+    ];\n+    \n+    await this.removeItems(oauthKeys);\n+  }\n+\n+  /**\n+   * Store OAuth tokens with expiration\n+   */\n+  async storeTokens(tokens: {\n+    accessToken: string;\n+    refreshToken?: string;\n+    expiresIn?: number;\n+  }): Promise<void> {\n+    // Use the same keys as oauth-core TokenManager\n+    await this.setItem('access_token', tokens.accessToken);\n+\n+    if (tokens.refreshToken) {\n+      await this.setItem('refresh_token', tokens.refreshToken);\n+    }\n+\n+    if (tokens.expiresIn) {\n+      const expiresAt = Date.now() + (tokens.expiresIn * 1000);\n+      await this.setItem('token_expiry', expiresAt.toString());\n+    }\n+\n+    // Set default token type\n+    await this.setItem('token_type', 'Bearer');\n+  }\n+\n+  /**\n+   * Retrieve stored OAuth tokens\n+   */\n+  async getTokens(): Promise<{\n+    accessToken: string | null;\n+    refreshToken: string | null;\n+    expiresAt: number | null;\n+  }> {\n+    const [accessToken, refreshToken, expiresAtStr] = await Promise.all([\n+      this.getItem('oauth_access_token'),\n+      this.getItem('oauth_refresh_token'),\n+      this.getItem('oauth_expires_at'),\n+    ]);\n+\n+    const expiresAt = expiresAtStr ? parseInt(expiresAtStr, 10) : null;\n+\n+    return {\n+      accessToken,\n+      refreshToken,\n+      expiresAt,\n+    };\n+  }\n+\n+  /**\n+   * Check if the stored access token is expired\n+   */\n+  async isTokenExpired(expiresAt?: number | null): Promise<boolean> {\n+    // If expiresAt is provided, use it directly\n+    if (expiresAt !== undefined && expiresAt !== null) {\n+      return Date.now() >= expiresAt;\n+    }\n+\n+    // Otherwise, read from storage\n+    const expiresAtStr = await this.getItem('oauth_expires_at');\n+    if (!expiresAtStr) {\n+      return true; // No expiration time means we should consider it expired\n+    }\n+\n+    const storedExpiresAt = parseInt(expiresAtStr, 10);\n+    return Date.now() >= storedExpiresAt;\n+  }\n+}\n"
                },
                {
                    "date": 1752999454763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,12 +85,13 @@\n     accessToken: string | null;\n     refreshToken: string | null;\n     expiresAt: number | null;\n   }> {\n+    // Use the same keys as oauth-core TokenManager\n     const [accessToken, refreshToken, expiresAtStr] = await Promise.all([\n-      this.getItem('oauth_access_token'),\n-      this.getItem('oauth_refresh_token'),\n-      this.getItem('oauth_expires_at'),\n+      this.getItem('access_token'),\n+      this.getItem('refresh_token'),\n+      this.getItem('token_expiry'),\n     ]);\n \n     const expiresAt = expiresAtStr ? parseInt(expiresAtStr, 10) : null;\n \n"
                },
                {
                    "date": 1752999467852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,132 +110,14 @@\n     if (expiresAt !== undefined && expiresAt !== null) {\n       return Date.now() >= expiresAt;\n     }\n \n-    // Otherwise, read from storage\n-    const expiresAtStr = await this.getItem('oauth_expires_at');\n+    // Otherwise, read from storage using oauth-core key\n+    const expiresAtStr = await this.getItem('token_expiry');\n     if (!expiresAtStr) {\n       return true; // No expiration time means we should consider it expired\n     }\n \n     const storedExpiresAt = parseInt(expiresAtStr, 10);\n     return Date.now() >= storedExpiresAt;\n   }\n }\n-import AsyncStorage from '@react-native-async-storage/async-storage';\n-import type { StorageAdapter } from '../types';\n-\n-/**\n- * Expo/React Native storage adapter using AsyncStorage\n- * Provides cross-platform storage for OAuth tokens and state\n- */\n-export class ExpoStorageAdapter implements StorageAdapter {\n-  async setItem(key: string, value: string): Promise<void> {\n-    try {\n-      await AsyncStorage.setItem(key, value);\n-    } catch (error) {\n-      throw new Error(`Failed to store item with key \"${key}\": ${error}`);\n-    }\n-  }\n-\n-  async getItem(key: string): Promise<string | null> {\n-    try {\n-      return await AsyncStorage.getItem(key);\n-    } catch (error) {\n-      throw new Error(`Failed to retrieve item with key \"${key}\": ${error}`);\n-    }\n-  }\n-\n-  async removeItem(key: string): Promise<void> {\n-    try {\n-      await AsyncStorage.removeItem(key);\n-    } catch (error) {\n-      throw new Error(`Failed to remove item with key \"${key}\": ${error}`);\n-    }\n-  }\n-\n-  async removeItems(keys: string[]): Promise<void> {\n-    try {\n-      await AsyncStorage.multiRemove(keys);\n-    } catch (error) {\n-      throw new Error(`Failed to remove items with keys \"${keys.join(', ')}\": ${error}`);\n-    }\n-  }\n-\n-  /**\n-   * Clear all OAuth-related storage items\n-   * Useful for logout functionality\n-   */\n-  async clearOAuthStorage(): Promise<void> {\n-    const oauthKeys = [\n-      'oauth_access_token',\n-      'oauth_refresh_token',\n-      'oauth_state',\n-      'oauth_code_verifier',\n-      'oauth_expires_at',\n-    ];\n-    \n-    await this.removeItems(oauthKeys);\n-  }\n-\n-  /**\n-   * Store OAuth tokens with expiration\n-   */\n-  async storeTokens(tokens: {\n-    accessToken: string;\n-    refreshToken?: string;\n-    expiresIn?: number;\n-  }): Promise<void> {\n-    await this.setItem('oauth_access_token', tokens.accessToken);\n-    \n-    if (tokens.refreshToken) {\n-      await this.setItem('oauth_refresh_token', tokens.refreshToken);\n-    }\n-    \n-    if (tokens.expiresIn) {\n-      const expiresAt = Date.now() + (tokens.expiresIn * 1000);\n-      await this.setItem('oauth_expires_at', expiresAt.toString());\n-    }\n-  }\n-\n-  /**\n-   * Retrieve stored OAuth tokens\n-   */\n-  async getTokens(): Promise<{\n-    accessToken: string | null;\n-    refreshToken: string | null;\n-    expiresAt: number | null;\n-  }> {\n-    const [accessToken, refreshToken, expiresAtStr] = await Promise.all([\n-      this.getItem('oauth_access_token'),\n-      this.getItem('oauth_refresh_token'),\n-      this.getItem('oauth_expires_at'),\n-    ]);\n-\n-    const expiresAt = expiresAtStr ? parseInt(expiresAtStr, 10) : null;\n-\n-    return {\n-      accessToken,\n-      refreshToken,\n-      expiresAt,\n-    };\n-  }\n-\n-  /**\n-   * Check if the stored access token is expired\n-   */\n-  async isTokenExpired(expiresAt?: number | null): Promise<boolean> {\n-    // If expiresAt is provided, use it directly\n-    if (expiresAt !== undefined && expiresAt !== null) {\n-      return Date.now() >= expiresAt;\n-    }\n-\n-    // Otherwise, read from storage\n-    const expiresAtStr = await this.getItem('oauth_expires_at');\n-    if (!expiresAtStr) {\n-      return true; // No expiration time means we should consider it expired\n-    }\n-\n-    const storedExpiresAt = parseInt(expiresAtStr, 10);\n-    return Date.now() >= storedExpiresAt;\n-  }\n-}\n"
                },
                {
                    "date": 1752999483544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,16 +42,20 @@\n    * Clear all OAuth-related storage items\n    * Useful for logout functionality\n    */\n   async clearOAuthStorage(): Promise<void> {\n+    // Use the same keys as oauth-core\n     const oauthKeys = [\n-      'oauth_access_token',\n-      'oauth_refresh_token',\n+      'access_token',\n+      'refresh_token',\n+      'token_expiry',\n+      'token_type',\n       'oauth_state',\n-      'oauth_code_verifier',\n-      'oauth_expires_at',\n+      'pkce_code_verifier',\n+      'pkce_code_challenge',\n+      'pkce_code_challenge_method',\n     ];\n-    \n+\n     await this.removeItems(oauthKeys);\n   }\n \n   /**\n"
                },
                {
                    "date": 1752999502605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,22 +88,25 @@\n   async getTokens(): Promise<{\n     accessToken: string | null;\n     refreshToken: string | null;\n     expiresAt: number | null;\n+    tokenType?: string;\n   }> {\n     // Use the same keys as oauth-core TokenManager\n-    const [accessToken, refreshToken, expiresAtStr] = await Promise.all([\n+    const [accessToken, refreshToken, expiresAtStr, tokenType] = await Promise.all([\n       this.getItem('access_token'),\n       this.getItem('refresh_token'),\n       this.getItem('token_expiry'),\n+      this.getItem('token_type'),\n     ]);\n \n     const expiresAt = expiresAtStr ? parseInt(expiresAtStr, 10) : null;\n \n     return {\n       accessToken,\n       refreshToken,\n       expiresAt,\n+      tokenType: tokenType || undefined,\n     };\n   }\n \n   /**\n"
                },
                {
                    "date": 1752999579857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,9 @@\n       'refresh_token',\n       'token_expiry',\n       'token_type',\n       'oauth_state',\n+      'oauth_state_expiry',\n       'pkce_code_verifier',\n       'pkce_code_challenge',\n       'pkce_code_challenge_method',\n     ];\n"
                }
            ],
            "date": 1752908193517,
            "name": "Commit-0",
            "content": "import AsyncStorage from '@react-native-async-storage/async-storage';\nimport type { StorageAdapter } from '../types';\n\n/**\n * Expo/React Native storage adapter using AsyncStorage\n * Provides cross-platform storage for OAuth tokens and state\n */\nexport class ExpoStorageAdapter implements StorageAdapter {\n  async setItem(key: string, value: string): Promise<void> {\n    try {\n      await AsyncStorage.setItem(key, value);\n    } catch (error) {\n      throw new Error(`Failed to store item with key \"${key}\": ${error}`);\n    }\n  }\n\n  async getItem(key: string): Promise<string | null> {\n    try {\n      return await AsyncStorage.getItem(key);\n    } catch (error) {\n      throw new Error(`Failed to retrieve item with key \"${key}\": ${error}`);\n    }\n  }\n\n  async removeItem(key: string): Promise<void> {\n    try {\n      await AsyncStorage.removeItem(key);\n    } catch (error) {\n      throw new Error(`Failed to remove item with key \"${key}\": ${error}`);\n    }\n  }\n\n  async removeItems(keys: string[]): Promise<void> {\n    try {\n      await AsyncStorage.multiRemove(keys);\n    } catch (error) {\n      throw new Error(`Failed to remove items with keys \"${keys.join(', ')}\": ${error}`);\n    }\n  }\n\n  /**\n   * Clear all OAuth-related storage items\n   * Useful for logout functionality\n   */\n  async clearOAuthStorage(): Promise<void> {\n    const oauthKeys = [\n      'oauth_access_token',\n      'oauth_refresh_token',\n      'oauth_state',\n      'oauth_code_verifier',\n      'oauth_expires_at',\n    ];\n    \n    await this.removeItems(oauthKeys);\n  }\n\n  /**\n   * Store OAuth tokens with expiration\n   */\n  async storeTokens(tokens: {\n    accessToken: string;\n    refreshToken?: string;\n    expiresIn?: number;\n  }): Promise<void> {\n    await this.setItem('oauth_access_token', tokens.accessToken);\n    \n    if (tokens.refreshToken) {\n      await this.setItem('oauth_refresh_token', tokens.refreshToken);\n    }\n    \n    if (tokens.expiresIn) {\n      const expiresAt = Date.now() + (tokens.expiresIn * 1000);\n      await this.setItem('oauth_expires_at', expiresAt.toString());\n    }\n  }\n\n  /**\n   * Retrieve stored OAuth tokens\n   */\n  async getTokens(): Promise<{\n    accessToken: string | null;\n    refreshToken: string | null;\n    expiresAt: number | null;\n  }> {\n    const [accessToken, refreshToken, expiresAtStr] = await Promise.all([\n      this.getItem('oauth_access_token'),\n      this.getItem('oauth_refresh_token'),\n      this.getItem('oauth_expires_at'),\n    ]);\n\n    const expiresAt = expiresAtStr ? parseInt(expiresAtStr, 10) : null;\n\n    return {\n      accessToken,\n      refreshToken,\n      expiresAt,\n    };\n  }\n\n  /**\n   * Check if the stored access token is expired\n   */\n  async isTokenExpired(expiresAt?: number | null): Promise<boolean> {\n    // If expiresAt is provided, use it directly\n    if (expiresAt !== undefined && expiresAt !== null) {\n      return Date.now() >= expiresAt;\n    }\n\n    // Otherwise, read from storage\n    const expiresAtStr = await this.getItem('oauth_expires_at');\n    if (!expiresAtStr) {\n      return true; // No expiration time means we should consider it expired\n    }\n\n    const storedExpiresAt = parseInt(expiresAtStr, 10);\n    return Date.now() >= storedExpiresAt;\n  }\n}\n"
        }
    ]
}