{
    "sourceFile": "src/adapters/ExpoHttpAdapter.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1752839299829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752839319859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,79 @@\n import type { HttpAdapter, HttpResponse } from '@zestic/oauth-core';\n \n /**\n  * Expo/React Native HTTP adapter using fetch\n- * Handles OAuth-related HTTP requests with proper error handling\n+ * Implements the oauth-core HttpAdapter interface\n  */\n export class ExpoHttpAdapter implements HttpAdapter {\n   private defaultHeaders: Record<string, string> = {\n     'Content-Type': 'application/json',\n     'Accept': 'application/json',\n   };\n \n-  async request(config: HttpRequestConfig): Promise<HttpResponse> {\n+  async post(url: string, data: Record<string, unknown>, headers?: Record<string, string>): Promise<HttpResponse> {\n+    return this.request('POST', url, data, headers);\n+  }\n+\n+  async get(url: string, headers?: Record<string, string>): Promise<HttpResponse> {\n+    return this.request('GET', url, undefined, headers);\n+  }\n+\n+  private async request(\n+    method: 'GET' | 'POST',\n+    url: string,\n+    data?: Record<string, unknown>,\n+    headers?: Record<string, string>\n+  ): Promise<HttpResponse> {\n     try {\n-      const headers = {\n+      const requestHeaders = {\n         ...this.defaultHeaders,\n-        ...config.headers,\n+        ...headers,\n       };\n \n-      const response = await fetch(config.url, {\n-        method: config.method,\n-        headers,\n-        body: config.body,\n-      });\n+      const requestOptions: RequestInit = {\n+        method,\n+        headers: requestHeaders,\n+      };\n \n+      if (data && method === 'POST') {\n+        if (requestHeaders['Content-Type'] === 'application/x-www-form-urlencoded') {\n+          // Convert data to URLSearchParams for form encoding\n+          const formData = new URLSearchParams();\n+          Object.entries(data).forEach(([key, value]) => {\n+            if (value !== undefined && value !== null) {\n+              formData.append(key, String(value));\n+            }\n+          });\n+          requestOptions.body = formData.toString();\n+        } else {\n+          requestOptions.body = JSON.stringify(data);\n+        }\n+      }\n+\n+      const response = await fetch(url, requestOptions);\n+\n       const responseHeaders: Record<string, string> = {};\n       response.headers.forEach((value, key) => {\n         responseHeaders[key] = value;\n       });\n \n-      let data: any;\n+      let responseData: unknown;\n       const contentType = response.headers.get('content-type');\n-      \n+\n       if (contentType?.includes('application/json')) {\n-        data = await response.json();\n+        responseData = await response.json();\n       } else {\n-        data = await response.text();\n+        responseData = await response.text();\n       }\n \n       return {\n         status: response.status,\n-        data,\n+        data: responseData,\n         headers: responseHeaders,\n       };\n     } catch (error) {\n-      throw new OAuthError(\n-        `Network request failed: ${error}`,\n-        OAUTH_ERROR_CODES.NETWORK_ERROR,\n-        error instanceof Error ? error : undefined\n-      );\n+      throw new Error(`Network request failed: ${error}`);\n     }\n   }\n \n   /**\n"
                },
                {
                    "date": 1752839339860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,126 +75,5 @@\n       throw new Error(`Network request failed: ${error}`);\n     }\n   }\n \n-  /**\n-   * Make an OAuth token exchange request\n-   */\n-  async exchangeCodeForTokens(config: {\n-    tokenEndpoint: string;\n-    clientId: string;\n-    code: string;\n-    redirectUri: string;\n-    codeVerifier: string;\n-  }): Promise<{\n-    access_token: string;\n-    refresh_token?: string;\n-    expires_in?: number;\n-    token_type: string;\n-  }> {\n-    const body = new URLSearchParams({\n-      grant_type: 'authorization_code',\n-      client_id: config.clientId,\n-      code: config.code,\n-      redirect_uri: config.redirectUri,\n-      code_verifier: config.codeVerifier,\n-    });\n-\n-    const response = await this.request({\n-      url: config.tokenEndpoint,\n-      method: 'POST',\n-      headers: {\n-        'Content-Type': 'application/x-www-form-urlencoded',\n-      },\n-      body: body.toString(),\n-    });\n-\n-    if (response.status !== 200) {\n-      throw new OAuthError(\n-        `Token exchange failed: ${response.data.error_description || response.data.error || 'Unknown error'}`,\n-        OAUTH_ERROR_CODES.TOKEN_EXCHANGE_FAILED\n-      );\n-    }\n-\n-    return response.data;\n-  }\n-\n-  /**\n-   * Make a magic link token exchange request\n-   */\n-  async exchangeMagicLinkToken(config: {\n-    tokenEndpoint: string;\n-    clientId: string;\n-    token: string;\n-    codeVerifier: string;\n-    state: string;\n-  }): Promise<{\n-    access_token: string;\n-    refresh_token?: string;\n-    expires_in?: number;\n-    token_type: string;\n-  }> {\n-    const body = new URLSearchParams({\n-      grant_type: 'magic_link',\n-      client_id: config.clientId,\n-      token: config.token,\n-      code_verifier: config.codeVerifier,\n-      state: config.state,\n-    });\n-\n-    const response = await this.request({\n-      url: config.tokenEndpoint,\n-      method: 'POST',\n-      headers: {\n-        'Content-Type': 'application/x-www-form-urlencoded',\n-      },\n-      body: body.toString(),\n-    });\n-\n-    if (response.status !== 200) {\n-      throw new OAuthError(\n-        `Magic link token exchange failed: ${response.data.error_description || response.data.error || 'Unknown error'}`,\n-        OAUTH_ERROR_CODES.TOKEN_EXCHANGE_FAILED\n-      );\n-    }\n-\n-    return response.data;\n-  }\n-\n-  /**\n-   * Refresh an OAuth access token\n-   */\n-  async refreshToken(config: {\n-    tokenEndpoint: string;\n-    clientId: string;\n-    refreshToken: string;\n-  }): Promise<{\n-    access_token: string;\n-    refresh_token?: string;\n-    expires_in?: number;\n-    token_type: string;\n-  }> {\n-    const body = new URLSearchParams({\n-      grant_type: 'refresh_token',\n-      client_id: config.clientId,\n-      refresh_token: config.refreshToken,\n-    });\n-\n-    const response = await this.request({\n-      url: config.tokenEndpoint,\n-      method: 'POST',\n-      headers: {\n-        'Content-Type': 'application/x-www-form-urlencoded',\n-      },\n-      body: body.toString(),\n-    });\n-\n-    if (response.status !== 200) {\n-      throw new OAuthError(\n-        `Token refresh failed: ${response.data.error_description || response.data.error || 'Unknown error'}`,\n-        OAUTH_ERROR_CODES.TOKEN_EXCHANGE_FAILED\n-      );\n-    }\n-\n-    return response.data;\n-  }\n }\n"
                },
                {
                    "date": 1752840054011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+import type { HttpAdapter, HttpResponse } from '@zestic/oauth-core';\n+\n+/**\n+ * Expo/React Native HTTP adapter using fetch\n+ * Implements the oauth-core HttpAdapter interface\n+ */\n+export class ExpoHttpAdapter implements HttpAdapter {\n+  async post(url: string, data: Record<string, unknown>, headers?: Record<string, string>): Promise<HttpResponse> {\n+    return this.makeRequest('POST', url, data, headers);\n+  }\n+\n+  async get(url: string, headers?: Record<string, string>): Promise<HttpResponse> {\n+    return this.makeRequest('GET', url, undefined, headers);\n+  }\n+\n+  private async makeRequest(\n+    method: 'GET' | 'POST',\n+    url: string,\n+    data?: Record<string, unknown>,\n+    headers?: Record<string, string>\n+  ): Promise<HttpResponse> {\n+    try {\n+      const defaultHeaders: Record<string, string> = {\n+        'Content-Type': 'application/json',\n+        'Accept': 'application/json',\n+      };\n+\n+      const requestHeaders = {\n+        ...defaultHeaders,\n+        ...headers,\n+      };\n+\n+      const requestOptions: RequestInit = {\n+        method,\n+        headers: requestHeaders,\n+      };\n+\n+      if (data && method === 'POST') {\n+        if (requestHeaders['Content-Type'] === 'application/x-www-form-urlencoded') {\n+          // Convert data to URLSearchParams for form encoding\n+          const formData = new URLSearchParams();\n+          Object.entries(data).forEach(([key, value]) => {\n+            if (value !== undefined && value !== null) {\n+              formData.append(key, String(value));\n+            }\n+          });\n+          requestOptions.body = formData.toString();\n+        } else {\n+          requestOptions.body = JSON.stringify(data);\n+        }\n+      }\n+\n+      const response = await fetch(url, requestOptions);\n+\n+      const responseHeaders: Record<string, string> = {};\n+      response.headers.forEach((value, key) => {\n+        responseHeaders[key] = value;\n+      });\n+\n+      let responseData: unknown;\n+      const contentType = response.headers.get('content-type');\n+\n+      if (contentType?.includes('application/json')) {\n+        responseData = await response.json();\n+      } else {\n+        responseData = await response.text();\n+      }\n+\n+      return {\n+        status: response.status,\n+        data: responseData,\n+        headers: responseHeaders,\n+      };\n+    } catch (error) {\n+      throw new Error(`Network request failed: ${error}`);\n+    }\n+  }\n+\n+}\n"
                }
            ],
            "date": 1752839299829,
            "name": "Commit-0",
            "content": "import type { HttpAdapter, HttpResponse } from '@zestic/oauth-core';\n\n/**\n * Expo/React Native HTTP adapter using fetch\n * Handles OAuth-related HTTP requests with proper error handling\n */\nexport class ExpoHttpAdapter implements HttpAdapter {\n  private defaultHeaders: Record<string, string> = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  };\n\n  async request(config: HttpRequestConfig): Promise<HttpResponse> {\n    try {\n      const headers = {\n        ...this.defaultHeaders,\n        ...config.headers,\n      };\n\n      const response = await fetch(config.url, {\n        method: config.method,\n        headers,\n        body: config.body,\n      });\n\n      const responseHeaders: Record<string, string> = {};\n      response.headers.forEach((value, key) => {\n        responseHeaders[key] = value;\n      });\n\n      let data: any;\n      const contentType = response.headers.get('content-type');\n      \n      if (contentType?.includes('application/json')) {\n        data = await response.json();\n      } else {\n        data = await response.text();\n      }\n\n      return {\n        status: response.status,\n        data,\n        headers: responseHeaders,\n      };\n    } catch (error) {\n      throw new OAuthError(\n        `Network request failed: ${error}`,\n        OAUTH_ERROR_CODES.NETWORK_ERROR,\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  /**\n   * Make an OAuth token exchange request\n   */\n  async exchangeCodeForTokens(config: {\n    tokenEndpoint: string;\n    clientId: string;\n    code: string;\n    redirectUri: string;\n    codeVerifier: string;\n  }): Promise<{\n    access_token: string;\n    refresh_token?: string;\n    expires_in?: number;\n    token_type: string;\n  }> {\n    const body = new URLSearchParams({\n      grant_type: 'authorization_code',\n      client_id: config.clientId,\n      code: config.code,\n      redirect_uri: config.redirectUri,\n      code_verifier: config.codeVerifier,\n    });\n\n    const response = await this.request({\n      url: config.tokenEndpoint,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body.toString(),\n    });\n\n    if (response.status !== 200) {\n      throw new OAuthError(\n        `Token exchange failed: ${response.data.error_description || response.data.error || 'Unknown error'}`,\n        OAUTH_ERROR_CODES.TOKEN_EXCHANGE_FAILED\n      );\n    }\n\n    return response.data;\n  }\n\n  /**\n   * Make a magic link token exchange request\n   */\n  async exchangeMagicLinkToken(config: {\n    tokenEndpoint: string;\n    clientId: string;\n    token: string;\n    codeVerifier: string;\n    state: string;\n  }): Promise<{\n    access_token: string;\n    refresh_token?: string;\n    expires_in?: number;\n    token_type: string;\n  }> {\n    const body = new URLSearchParams({\n      grant_type: 'magic_link',\n      client_id: config.clientId,\n      token: config.token,\n      code_verifier: config.codeVerifier,\n      state: config.state,\n    });\n\n    const response = await this.request({\n      url: config.tokenEndpoint,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body.toString(),\n    });\n\n    if (response.status !== 200) {\n      throw new OAuthError(\n        `Magic link token exchange failed: ${response.data.error_description || response.data.error || 'Unknown error'}`,\n        OAUTH_ERROR_CODES.TOKEN_EXCHANGE_FAILED\n      );\n    }\n\n    return response.data;\n  }\n\n  /**\n   * Refresh an OAuth access token\n   */\n  async refreshToken(config: {\n    tokenEndpoint: string;\n    clientId: string;\n    refreshToken: string;\n  }): Promise<{\n    access_token: string;\n    refresh_token?: string;\n    expires_in?: number;\n    token_type: string;\n  }> {\n    const body = new URLSearchParams({\n      grant_type: 'refresh_token',\n      client_id: config.clientId,\n      refresh_token: config.refreshToken,\n    });\n\n    const response = await this.request({\n      url: config.tokenEndpoint,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: body.toString(),\n    });\n\n    if (response.status !== 200) {\n      throw new OAuthError(\n        `Token refresh failed: ${response.data.error_description || response.data.error || 'Unknown error'}`,\n        OAUTH_ERROR_CODES.TOKEN_EXCHANGE_FAILED\n      );\n    }\n\n    return response.data;\n  }\n}\n"
        }
    ]
}