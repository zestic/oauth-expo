{
    "sourceFile": "src/types/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1752853136608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752904235553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,4 +182,70 @@\n   FLOW_VALIDATION_FAILED: 'flow_validation_failed',\n } as const;\n \n export type OAuthErrorCode = typeof OAUTH_ERROR_CODES[keyof typeof OAUTH_ERROR_CODES];\n+\n+/**\n+ * Theme variants for OAuth components\n+ */\n+export type OAuthTheme = 'light' | 'dark' | 'auto';\n+\n+/**\n+ * Component variants for OAuth components\n+ */\n+export type OAuthVariant = 'minimal' | 'card' | 'fullscreen' | 'modal';\n+\n+/**\n+ * Unistyles-compatible theme interface\n+ */\n+export interface OAuthThemeConfig {\n+  colors: {\n+    background: string;\n+    surface: string;\n+    primary: string;\n+    secondary: string;\n+    text: string;\n+    textSecondary: string;\n+    success: string;\n+    error: string;\n+    warning: string;\n+    border: string;\n+  };\n+  spacing: {\n+    xs: number;\n+    sm: number;\n+    md: number;\n+    lg: number;\n+    xl: number;\n+  };\n+  typography: {\n+    h1: { fontSize: number; fontWeight: string };\n+    h2: { fontSize: number; fontWeight: string };\n+    h3: { fontSize: number; fontWeight: string };\n+    body: { fontSize: number; fontWeight: string };\n+    caption: { fontSize: number; fontWeight: string };\n+  };\n+  borderRadius: {\n+    sm: number;\n+    md: number;\n+    lg: number;\n+    xl: number;\n+  };\n+  shadows: {\n+    sm: object;\n+    md: object;\n+    lg: object;\n+  };\n+}\n+\n+/**\n+ * Custom component overrides for OAuth components\n+ */\n+export interface OAuthComponentOverrides {\n+  LoadingIndicator?: React.ComponentType<any>;\n+  SuccessIcon?: React.ComponentType<any>;\n+  ErrorIcon?: React.ComponentType<any>;\n+  Container?: React.ComponentType<any>;\n+  Title?: React.ComponentType<any>;\n+  Message?: React.ComponentType<any>;\n+  Button?: React.ComponentType<any>;\n+}\n"
                },
                {
                    "date": 1752917823327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,28 @@\n+// Import core types from oauth-core\n+export type {\n+  OAuthConfig,\n+  OAuthAdapters,\n+  OAuthResult,\n+  StorageAdapter,\n+  HttpAdapter,\n+  PKCEAdapter,\n+  HttpResponse,\n+  FlowConfiguration,\n+  PKCEChallenge,\n+  TokenExchangeRequest,\n+  TokenResponse,\n+  OAuthError,\n+  OAuthErrorCode\n+} from '@zestic/oauth-core';\n+\n /**\n  * OAuth configuration for Expo applications\n+ * Extends the core OAuthConfig with Expo-specific properties\n  */\n-export interface ExpoOAuthConfig {\n-  clientId: string;\n-  endpoints: {\n-    authorization: string;\n-    token: string;\n-    revocation?: string;\n-  };\n-  redirectUri: string;\n-  scopes: string[];\n+export interface ExpoOAuthConfig extends OAuthConfig {\n   scheme: string;\n   path: string;\n-  flows?: FlowConfiguration;\n }\n \n /**\n  * OAuth callback parameters that can be received from various flows\n"
                },
                {
                    "date": 1752917837152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,23 +45,9 @@\n   // Additional parameters\n   [key: string]: string | null | undefined;\n }\n \n-/**\n- * Result of OAuth operations\n- */\n-export interface OAuthResult {\n-  success: boolean;\n-  accessToken?: string;\n-  refreshToken?: string;\n-  expiresIn?: number;\n-  expiresAt?: number;\n-  tokenType?: string;\n-  scope?: string;\n-  error?: string;\n-  message?: string;\n-  tokens?: TokenData;\n-}\n+// OAuthResult is now imported from oauth-core above\n \n /**\n  * Token data structure\n  */\n"
                },
                {
                    "date": 1752917851064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,18 +68,9 @@\n   codeVerifier: string;\n   state: string;\n }\n \n-/**\n- * Flow configuration for OAuth\n- */\n-export interface FlowConfiguration {\n-  enabledFlows?: string[];\n-  disabledFlows?: string[];\n-  customFlows?: any[];\n-  defaultFlow?: string;\n-  detectionStrategy?: 'auto' | 'priority' | 'explicit';\n-}\n+// FlowConfiguration is now imported from oauth-core above\n \n /**\n  * OAuth callback hook status\n  */\n"
                },
                {
                    "date": 1752917877160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,52 +95,11 @@\n  * Use OAuth callback result (alias for backward compatibility)\n  */\n export type UseOAuthCallbackResult = OAuthCallbackHookResult;\n \n-/**\n- * Storage adapter interface\n- */\n-export interface StorageAdapter {\n-  setItem(key: string, value: string): Promise<void>;\n-  getItem(key: string): Promise<string | null>;\n-  removeItem(key: string): Promise<void>;\n-  removeItems(keys: string[]): Promise<void>;\n-  clearOAuthStorage(): Promise<void>;\n-  storeTokens(tokens: TokenData): Promise<void>;\n-  getTokens(): Promise<TokenData>;\n-  isTokenExpired(expiresAt: number | null): Promise<boolean>;\n-}\n+// StorageAdapter, HttpAdapter, PKCEAdapter, and OAuthAdapters are now imported from oauth-core above\n \n /**\n- * HTTP adapter interface\n- */\n-export interface HttpAdapter {\n-  post(url: string, data: any, headers?: Record<string, string>): Promise<any>;\n-  get(url: string, headers?: Record<string, string>): Promise<any>;\n-}\n-\n-/**\n- * PKCE adapter interface\n- */\n-export interface PKCEAdapter {\n-  generateCodeChallenge(): Promise<{\n-    codeChallenge: string;\n-    codeChallengeMethod: string;\n-    codeVerifier: string;\n-  }>;\n-  generateState(): Promise<string>;\n-}\n-\n-/**\n- * OAuth adapters collection\n- */\n-export interface OAuthAdapters {\n-  storage: StorageAdapter;\n-  http: HttpAdapter;\n-  pkce: PKCEAdapter;\n-}\n-\n-/**\n  * OAuth error class\n  */\n export class OAuthError extends Error {\n   constructor(\n"
                },
                {
                    "date": 1752917904225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,40 +97,11 @@\n export type UseOAuthCallbackResult = OAuthCallbackHookResult;\n \n // StorageAdapter, HttpAdapter, PKCEAdapter, and OAuthAdapters are now imported from oauth-core above\n \n-/**\n- * OAuth error class\n- */\n-export class OAuthError extends Error {\n-  constructor(\n-    message: string,\n-    public code: string,\n-    public originalError?: Error\n-  ) {\n-    super(message);\n-    this.name = 'OAuthError';\n-  }\n-}\n+// OAuthError and OAUTH_ERROR_CODES are now imported from oauth-core above\n \n /**\n- * OAuth error codes\n- */\n-export const OAUTH_ERROR_CODES = {\n-  INVALID_STATE: 'invalid_state',\n-  TOKEN_EXCHANGE_FAILED: 'token_exchange_failed',\n-  MISSING_PKCE: 'missing_pkce_parameters',\n-  NETWORK_ERROR: 'network_error',\n-  INVALID_GRANT: 'invalid_grant',\n-  UNSUPPORTED_GRANT_TYPE: 'unsupported_grant_type',\n-  NO_FLOW_HANDLER: 'no_flow_handler',\n-  UNKNOWN_FLOW: 'unknown_flow',\n-  FLOW_VALIDATION_FAILED: 'flow_validation_failed',\n-} as const;\n-\n-export type OAuthErrorCode = typeof OAUTH_ERROR_CODES[keyof typeof OAUTH_ERROR_CODES];\n-\n-/**\n  * Theme variants for OAuth components\n  */\n export type OAuthTheme = 'light' | 'dark' | 'auto';\n \n"
                },
                {
                    "date": 1752917966679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,14 @@\n  */\n export interface ExpoOAuthConfig extends OAuthConfig {\n   scheme: string;\n   path: string;\n+  // Override endpoints to make revocation optional for Expo\n+  endpoints: {\n+    authorization: string;\n+    token: string;\n+    revocation?: string;\n+  };\n }\n \n /**\n  * OAuth callback parameters that can be received from various flows\n"
                }
            ],
            "date": 1752853136608,
            "name": "Commit-0",
            "content": "/**\n * OAuth configuration for Expo applications\n */\nexport interface ExpoOAuthConfig {\n  clientId: string;\n  endpoints: {\n    authorization: string;\n    token: string;\n    revocation?: string;\n  };\n  redirectUri: string;\n  scopes: string[];\n  scheme: string;\n  path: string;\n  flows?: FlowConfiguration;\n}\n\n/**\n * OAuth callback parameters that can be received from various flows\n */\nexport interface OAuthCallbackParams {\n  // OAuth2 Authorization Code Flow\n  code?: string;\n  state?: string;\n  \n  // Magic Link Flow\n  token?: string;\n  magic_link_token?: string;\n  flow?: 'login' | 'registration' | 'magic_link';\n  \n  // Error parameters\n  error?: string;\n  error_description?: string;\n  error_uri?: string;\n  \n  // Additional parameters\n  [key: string]: string | null | undefined;\n}\n\n/**\n * Result of OAuth operations\n */\nexport interface OAuthResult {\n  success: boolean;\n  accessToken?: string;\n  refreshToken?: string;\n  expiresIn?: number;\n  expiresAt?: number;\n  tokenType?: string;\n  scope?: string;\n  error?: string;\n  message?: string;\n  tokens?: TokenData;\n}\n\n/**\n * Token data structure\n */\nexport interface TokenData {\n  accessToken: string | null;\n  refreshToken: string | null;\n  expiresAt: number | null;\n  tokenType?: string;\n  scope?: string;\n}\n\n/**\n * PKCE parameters\n */\nexport interface PKCEParams {\n  codeChallenge: string;\n  codeChallengeMethod: string;\n  codeVerifier: string;\n  state: string;\n}\n\n/**\n * Flow configuration for OAuth\n */\nexport interface FlowConfiguration {\n  enabledFlows?: string[];\n  disabledFlows?: string[];\n  customFlows?: any[];\n  defaultFlow?: string;\n  detectionStrategy?: 'auto' | 'priority' | 'explicit';\n}\n\n/**\n * OAuth callback hook status\n */\nexport type OAuthCallbackStatus = 'processing' | 'success' | 'error';\n\n/**\n * OAuth status (alias for backward compatibility)\n */\nexport type OAuthStatus = OAuthCallbackStatus;\n\n/**\n * OAuth callback hook result\n */\nexport interface OAuthCallbackHookResult {\n  status: OAuthCallbackStatus;\n  message: string;\n  handleCallback: (params?: OAuthCallbackParams) => Promise<void>;\n  retry: () => void;\n}\n\n/**\n * Use OAuth callback result (alias for backward compatibility)\n */\nexport type UseOAuthCallbackResult = OAuthCallbackHookResult;\n\n/**\n * Storage adapter interface\n */\nexport interface StorageAdapter {\n  setItem(key: string, value: string): Promise<void>;\n  getItem(key: string): Promise<string | null>;\n  removeItem(key: string): Promise<void>;\n  removeItems(keys: string[]): Promise<void>;\n  clearOAuthStorage(): Promise<void>;\n  storeTokens(tokens: TokenData): Promise<void>;\n  getTokens(): Promise<TokenData>;\n  isTokenExpired(expiresAt: number | null): Promise<boolean>;\n}\n\n/**\n * HTTP adapter interface\n */\nexport interface HttpAdapter {\n  post(url: string, data: any, headers?: Record<string, string>): Promise<any>;\n  get(url: string, headers?: Record<string, string>): Promise<any>;\n}\n\n/**\n * PKCE adapter interface\n */\nexport interface PKCEAdapter {\n  generateCodeChallenge(): Promise<{\n    codeChallenge: string;\n    codeChallengeMethod: string;\n    codeVerifier: string;\n  }>;\n  generateState(): Promise<string>;\n}\n\n/**\n * OAuth adapters collection\n */\nexport interface OAuthAdapters {\n  storage: StorageAdapter;\n  http: HttpAdapter;\n  pkce: PKCEAdapter;\n}\n\n/**\n * OAuth error class\n */\nexport class OAuthError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public originalError?: Error\n  ) {\n    super(message);\n    this.name = 'OAuthError';\n  }\n}\n\n/**\n * OAuth error codes\n */\nexport const OAUTH_ERROR_CODES = {\n  INVALID_STATE: 'invalid_state',\n  TOKEN_EXCHANGE_FAILED: 'token_exchange_failed',\n  MISSING_PKCE: 'missing_pkce_parameters',\n  NETWORK_ERROR: 'network_error',\n  INVALID_GRANT: 'invalid_grant',\n  UNSUPPORTED_GRANT_TYPE: 'unsupported_grant_type',\n  NO_FLOW_HANDLER: 'no_flow_handler',\n  UNKNOWN_FLOW: 'unknown_flow',\n  FLOW_VALIDATION_FAILED: 'flow_validation_failed',\n} as const;\n\nexport type OAuthErrorCode = typeof OAUTH_ERROR_CODES[keyof typeof OAUTH_ERROR_CODES];\n"
        }
    ]
}